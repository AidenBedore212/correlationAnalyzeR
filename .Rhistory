label <- paste0(secondaryGene, " (", round(corrVal, 2), ")\n")
}
} else if (length(corrPrev) > 1) {
warning(paste0("Difficulty plotting with labels for ", gene,
" -- more than two values are similar"))
corrPrevVal <- res[corrPrev[1]]
if (corrPrevVal < corrVal ) {
# Code to change direction of label if new corr val is greater
ind <- corrPrev*2 + 1
ind <- ind[1]
his$layers[[ind]]$aes_params$label <- paste0(
substr(his$layers[[ind]]$aes_params$label, 2, 100
), "\n")
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
} else {
label <- paste0(secondaryGene, " (", round(corrVal, 2), ")\n")
}
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
} else {
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
}
if (abs(corrVal) < .15) {
his <- his +
ggplot2::geom_vline(xintercept = corrVal, linetype = 3) +
ggplot2::annotate(geom = "text", x = corrVal,
y = sample(c(1800:2600), 1),
label = label,
color = "red", angle = 90, size = 2)
} else {
his <- his +
ggplot2::geom_vline(xintercept = corrVal, linetype = 3) +
ggplot2::annotate(geom = "text", x = corrVal,
y = sample(c(1500:2200), 1),
label = label,
color = "red", angle = 90, size = 2)
}
}
}
# Finalizes histogram
his <- his + ggplot2::theme(text = ggplot2::element_text(size = 10))
if (! returnDataOnly) {
ggplot2::ggsave(plot = his, width = 8, height = 5, filename = file.path(geneOutDir,
paste0(gene, ".png")))
}
names(res) <- secondaryGenes
# Significance testing
if (sigTest) {
# Get correlation values for selected genes
vec <- corrDF$correlationValue
names(vec) <- corrDF$geneName
vec <- vec[which(! is.na(vec))]
selectVec <- vec[secondaryGenes]
# Construct distribution for random at same input size
n <- length(selectVec)
# Function to boot
meanBoot <- function(data, indices) {
d <- data[indices] # allows boot to select sample
d <- sample(d, size = n)
ttest <- t.test(x = abs(selectVec), y = abs(d)) # Considers absolute value comparison
c(mean(d), median(d), ttest$p.value)
}
# Function to give significance stars
getSigStars <- function(pVal) {
pMap <- c(.05, .01, .001, .0001)
names(pMap) <- c("*", "**", "***", "****")
sig <- ifelse(test = pVal < pMap[4],
yes = names(pMap)[4],
no = ifelse(test = pVal < pMap[3],
yes = names(pMap)[3],
no = ifelse(pVal < pMap[2],
yes = names(pMap)[2],
no = ifelse(test = pVal < pMap[1],
yes = names(pMap)[1],
no = "n.s."))))
}
# Reproducibility
set.seed(1)
# bootstrapping with # replications
results <- boot::boot(data=vec, statistic=meanBoot,
R=nPerm)
# Get value for input data
Meanabs <- mean(abs(selectVec), na.rm = T) # For pvalue calc
Medianabs <- median(abs(selectVec), na.rm = T) # For pvalue calc
Mean <- mean((selectVec), na.rm = T) # For plotting
Median <- median((selectVec), na.rm = T) # For plotting
# Get bootstrapped values
meanVec <- results$t[,1]
medianVec <- results$t[,2]
ttestVec <- results$t[,3]
# Build plots
tdf <- as.data.frame(results$t)
colnames(tdf) <- c("Means", "Medians", "TTest_pVals")
# Means
paste0(gene, " correlation means distribution")
# Determine if the abs mean of selected genes
pValMeans <- sum(abs(tdf$Means) > Meanabs)/sum(! is.na(tdf$Means))
meanStr <- paste0("Selected Genes Mean, p = ", pValMeans, " [", getSigStars(pValMeans), "]")
pMeans <- ggpubr::gghistogram(data = tdf, bins = 40, ylab = "Frequency\n",
x = "Means", xlab = "Bootstrapped means") +
ggplot2::geom_vline(ggplot2::aes(xintercept = Mean, color = meanStr)) +
ggplot2::scale_colour_manual("",
breaks = meanStr,
values = c("red"))
# Means
pValMedians <- sum(abs(tdf$Medians) > Medianabs)/sum(! is.na(tdf$Medians))
medianStr <- paste0("Selected Genes Median, p = ", pValMedians, " [", getSigStars(pValMedians), "]")
pMedians <- ggpubr::gghistogram(data = tdf, bins = 60, ylab = "Frequency\n",
x = "Medians", xlab = "Bootstrapped medians",
title = paste0(gene, " correlation medians distribution")) +
ggplot2::geom_vline(ggplot2::aes(xintercept = Mean, color = medianStr)) +
ggplot2::scale_colour_manual("",
breaks = medianStr,
values = c("blue"))
# TTest pVals
title = paste0(gene, " correlations (selected vs random) pval distribution")
density(tdf$TTest_pVals)
denY <- which.max(density(tdf$TTest_pVals)$y)
pValTTest <- density(tdf$TTest_pVals)$x[denY]
pValStr <- paste0("P(summit) = ", round(pValTTest, digits = 3))
pTtest <- ggpubr::ggdensity(data = tdf, ylab = "P value density\n",
x = "TTest_pVals", xlab = "Bootstrapped T-Test pVals (selected vs random)") +
ggplot2::geom_vline(ggplot2::aes(xintercept = pValTTest, color = pValStr)) +
ggplot2::scale_colour_manual("",
breaks = pValStr,
values = c("grey"))
# Plot if not returnDataOnly
if (! returnDataOnly) {
ggplot2::ggsave(plot = pMeans, filename = file.path(geneOutDir,
paste0(gene, ".bootstrapped_means.png")),
width = 8, height = 5)
ggplot2::ggsave(plot = pMedians, filename = file.path(geneOutDir,
paste0(gene, ".bootstrapped_medians.png")),
width =8, height = 5)
ggplot2::ggsave(plot = pTtest, filename = file.path(geneOutDir,
paste0(gene, ".bootstrapped_TTest_PVals.png")),
width = 8, height = 5)
}
}
# Return results based on whether sigTest is true
if (! sigTest) {
resList[[i]] <- list("Correlation_Values" = res,
"Correlation_histogram" = his)
} else {
resList[[i]] <- list("Correlation_Values" = res,
"Correlation_histogram" = his,
"sigTest" =  list("means" = meanVec,
"meansPlot" = pMeans,
"medians" = medianVec,
"mediansPlot" = pMedians,
"tTest_pvals" = ttestVec,
"tTest_pvalsPlot" = pTtest))
}
names(resList)[i] <- gene
}
return(resList)
resList$ASXL1$sigTest$meansPlot
resList$ASXL1$sigTest$mediansPlot
resList$ASXL1$sigTest$tTest_pvalsPlot
pValStr <- paste0("P(summit) = ", round(pValTTest, digits = 3), " [", getSigStars(pValTTest), "]")
?ggpubr::ggdensity
plotTitle=F
pMeans <- ggpubr::gghistogram(data = tdf, bins = 60, ylab = "Frequency\n",
title = ifelse(plotTitle,
yes = paste0(gene, " correlation means distribution"),
no = NULL),
x = "Means", xlab = "Bootstrapped means") +
ggplot2::geom_vline(ggplot2::aes(xintercept = Mean, color = meanStr)) +
ggplot2::scale_colour_manual("",
breaks = meanStr,
values = c("red"))
ifelse(plotTitle,
yes = paste0(gene, " correlation means distribution"),
no = NULL)
gene
ifelse(test = plotTitle,
yes = paste0(gene, " correlation means distribution"),
no = NULL)
plottitle
plotTitle
ifelse(test = plotTitle,
yes = paste0(gene, " correlation means distribution"),
no = plotTitle)
swtich(plotTitle,
paste0(gene, " correlation means distribution"),
NULL)
switch(plotTitle,
paste0(gene, " correlation means distribution"),
NULL)
switch(plotTitle, NULL,
paste0(gene, " correlation means distribution"))
switch(plotTitle + 1, NULL,
paste0(gene, " correlation means distribution"))
plotTitle = T
switch(plotTitle + 1, NULL,
paste0(gene, " correlation means distribution"))
pMeans <- ggpubr::gghistogram(data = tdf, bins = 60, ylab = "Frequency\n",
title = switch(plotTitle + 1, NULL,
paste0(gene, " correlation means distribution")),
x = "Means", xlab = "Bootstrapped means") +
ggplot2::geom_vline(ggplot2::aes(xintercept = Mean, color = meanStr)) +
ggplot2::scale_colour_manual("",
breaks = meanStr,
values = c("red"))
pMeans
plotTitle = F
pMeans <- ggpubr::gghistogram(data = tdf, bins = 60, ylab = "Frequency\n",
title = switch(plotTitle + 1, NULL,
paste0(gene, " correlation means distribution")),
x = "Means", xlab = "Bootstrapped means") +
ggplot2::geom_vline(ggplot2::aes(xintercept = Mean, color = meanStr)) +
ggplot2::scale_colour_manual("",
breaks = meanStr,
values = c("red"))
pMeans
pMedians <- ggpubr::gghistogram(data = tdf, bins = 60, ylab = "Frequency\n",
x = "Medians", xlab = "Bootstrapped medians",
title = switch(plotTitle + 1, NULL,
paste0(gene, " correlation means distribution"))) +
ggplot2::geom_vline(ggplot2::aes(xintercept = Mean, color = medianStr)) +
ggplot2::scale_colour_manual("",
breaks = medianStr,
values = c("blue"))
pMedians
plotTitle = T
plotTitle = T
pMedians <- ggpubr::gghistogram(data = tdf, bins = 60, ylab = "Frequency\n",
x = "Medians", xlab = "Bootstrapped medians",
title = switch(plotTitle + 1, NULL,
paste0(gene, " correlation means distribution"))) +
ggplot2::geom_vline(ggplot2::aes(xintercept = Mean, color = medianStr)) +
ggplot2::scale_colour_manual("",
breaks = medianStr,
values = c("blue"))
pMedians
pTtest <- ggpubr::ggdensity(data = tdf, ylab = "P value density\n",
x = "TTest_pVals",
xlab = "Bootstrapped T-Test pVals (selected vs random)",
title = switch(plotTitle + 1, NULL,
paste0(gene, " permutation t-test pVal distribution"))) +
ggplot2::geom_vline(ggplot2::aes(xintercept = pValTTest, color = pValStr)) +
ggplot2::scale_colour_manual("",
breaks = pValStr,
values = c("grey"))
pTtest
pTtest <- ggpubr::ggdensity(data = tdf, ylab = "P value density\n",
x = "TTest_pVals",
xlab = "Bootstrapped T-Test pVals (selected vs random)",
title = switch(plotTitle + 1, NULL,
paste0(gene, " permutation t-test p-val distribution"))) +
ggplot2::geom_vline(ggplot2::aes(xintercept = pValTTest, color = pValStr)) +
ggplot2::scale_colour_manual("",
breaks = pValStr,
values = c("grey"))
pTtest
library(correlationAnalyzeR)
his
pMeans <- ggpubr::gghistogram(data = tdf, bins = 60, ylab = "Frequency\n",
title = switch(plotTitle + 1, NULL,
paste0(gene, " correlation means distribution")),
x = "Means", xlab = "Bootstrapped means") +
ggplot2::geom_vline(ggplot2::aes(xintercept = Mean, color = meanStr)) +
ggplot2::scale_colour_manual("",
breaks = meanStr,
values = c("red")) + ggplot2::scale_y_continuous(expand = c(0,0))
pMeans
pTtest <- ggpubr::ggdensity(data = tdf, ylab = "P value density\n",
x = "TTest_pVals",
xlab = "Bootstrapped T-Test pVals (selected vs random)",
title = switch(plotTitle + 1, NULL,
paste0(gene, " permutation t-test p-val distribution"))) +
ggplot2::geom_vline(ggplot2::aes(xintercept = pValTTest, color = pValStr)) +
ggplot2::scale_colour_manual("",
breaks = pValStr,
values = c("grey")) +
ggplot2::scale_y_continuous(expand = c(0,0))
pTtest
library(correlationAnalyzeR)
install.packages("umap")
library(umap)
?umap
pcaData
load("data/mmusculus_corrSmall_geneNames.rda")
mmusculus_corrSmall_geneNames
mmusculus_corrSmall_geneNames
library(correlationAnalyzeR)
getAvailableGenes()
library(correlationAnalyzeR)
library(correlationAnalyzeR)
# Bug testing
TERM2GENE <- hsapiens_simple_TERM2GENE
ranks <- correlationAnalyzeR::getCorrelationData("BRCA1")
ranks <- correlationAnalyzeR::getCorrelationData("BRCA1", Sample_Type = "Normal_Tissues")
ranks <- correlationAnalyzeR::getCorrelationData("BRCA1", Sample_Type = "Normal_Tissues")
ranks <- correlationAnalyzeR::getCorrelationData(geneList = "BRCA1", Sample_Type = "Normal_Tissues")
ranks <- correlationAnalyzeR::getCorrelationData(geneList = "BRCA1", Species = "hsapiens",
Sample_Type = "Normal_Tissues")
View(ranks)
data <- correlationAnalyzeR::getCorrelationData(geneList = "BRCA1", Species = "hsapiens",
Sample_Type = "Normal_Tissues")
data <- cbind(rownames(data), data)
colnames(data)[1] <- "geneName"
data <- data[which(data[,1] != "BRCA1"),]
rownames(data) <- NULL
load("../Shiny_Apps/correlationAnalyzeR/data/geneInfo/HS_basicGeneInfo.RData")
data <- merge(x = HS_basicGeneInfo, y = data, by = "geneName")
View(data)
ranks <- correlationData[,4]
ranks <- data[,4]
names(ranks) <- data[,1]
ranks
resList <- list()
ranks <- ranks[which(! duplicated(names(ranks)))]
ranks
ranks <- ranks[which(! is.na(ranks))]
ranks <- ranks[order(ranks, decreasing = T)]
ranks
padjustedCutoff <- .05
EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=TERM2GENE,
nPerm = 1000, pvalueCutoff = padjustedCutoff)
resGSEA <- as.data.frame(EGMT)
resList[["EGMT"]] <- EGMT
if (length(resGSEA$ID) < 10){
warning(paste0("GSEA Failed -- No significant pathways at designated pValue: ",
padjustedCutoff, ". Rerunning with higher pValue."))
EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=TERM2GENE,
nPerm = 1000, pvalueCutoff = padjustedCutoff + .2)
resGSEA <- as.data.frame(EGMT)
resList[["EGMT"]] <- EGMT
}
if (length(resGSEA$ID) < 10){
warning(paste0("GSEA Failed -- No significant pathways at designated pValue: ",
padjustedCutoff, ". Rerunning with higher pValue."))
EGMT <- clusterProfiler::GSEA(ranks, TERM2GENE=TERM2GENE,
nPerm = 1000, pvalueCutoff = padjustedCutoff + .45)
resGSEA <- as.data.frame(EGMT)
resList[["EGMT"]] <- EGMT
}
res <- pairedGenesAnalyzeR(pairedGenesList = list("Akt" = "RIGGI_EWING_SARCOMA_PROGENITOR_UP"), Species = "mmusculus", Sample_Type = "Tumor_Tissues", returnDataOnly = T)
res <- pairedGenesAnalyzeR(pairedGenesList = list("AKT" = "RIGGI_EWING_SARCOMA_PROGENITOR_UP"), Species = "mmusculus", Sample_Type = "Tumor_Tissues", returnDataOnly = T)
res <- pairedGenesAnalyzeR(pairedGenesList = list("MTOR" = "RIGGI_EWING_SARCOMA_PROGENITOR_UP"), Species = "mmusculus", Sample_Type = "Tumor_Tissues", returnDataOnly = T)
# Bug checking
Species = c( "mmusculus")
Sample_Type = "Tumor_Tissues"
returnDataOnly <- T
# pairedGenesList <- list("ATM" = "MIYAGAWA_TARGETS_OF_EWSR1_ETS_FUSIONS_UP",
#                         "SON" = "TORCHIA_TARGETS_OF_EWSR1_FLI1_FUSION_UP",
#                         "BRCA1" = "BILD_E2F3_ONCOGENIC_SIGNATURE")
# pairedGenesList <- list("ATM" = c("TP53", "NFE2L2", "BRCA2"))
# pairedGenesList <- list("BRCA1" = "PUJANA_BRCA1_PCC_NETWORK")
pairedGenesList <- list("Akt" = "RIGGI_EWING_SARCOMA_PROGENITOR_UP")
library(correlationAnalyzeR)
onlyTop <- F
topCutoff <- .5
plotLabels <- F
sigTest <- T
autoRug <- T
nPerm <- 2000
outputPrefix = "tests/pairedTestFIVE"
plotMaxMinCorr <- T
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Ensure input data is correct
if (typeof(pairedGenesList) != "list" | is.null(names(pairedGenesList))) {
stop("\tFormat pairedGenesList as a named list in which:
1) Names are the primary genes of interest.
2) List values contain vectors of secondary genes to compare against -- OR
a string with the official MSIGDB name of a geneset to compare against.\n
e.g. pairedGenesList = list('TP53' = c('BRCA1', 'CDK12', 'PARP1'),
'SON' = c('DHX9'),
'MCM2' = c('PCNA', 'STAG2'))  \n")
}
# Initialize results object
resList <- list()
# Check primary genes to make sure they exist
avGenes <- correlationAnalyzeR::getAvailableGenes(Species = Species)
View(avGenes)
res <- pairedGenesAnalyzeR(pairedGenesList = list("Akt1" = "RIGGI_EWING_SARCOMA_PROGENITOR_UP"), Species = "mmusculus", Sample_Type = "Tumor_Tissues", returnDataOnly = T)
TERM2GENE <- correlationAnalyzeR::mmusculus_complex_TERM2GENE
colnames(TERM2GENE)
View(TERM2GENE)
TERM2GENE <- correlationAnalyzeR::hsapiens_complex_TERM2GENE
View(TERM2GENE)
View(mouseGenes)
TERM2GENE <- correlationAnalyzeR::mmusculus_complex_TERM2GENE
View(TERM2GENE)
# Bug checking
Species = c( "mmusculus")
Sample_Type = "Tumor_Tissues"
returnDataOnly <- T
outputPrefix = "tests/pairedOut"
# pairedGenesList <- list("ATM" = "MIYAGAWA_TARGETS_OF_EWSR1_ETS_FUSIONS_UP",
#                         "SON" = "TORCHIA_TARGETS_OF_EWSR1_FLI1_FUSION_UP",
#                         "BRCA1" = "BILD_E2F3_ONCOGENIC_SIGNATURE")
# pairedGenesList <- list("ATM" = c("TP53", "NFE2L2", "BRCA2"))
# pairedGenesList <- list("BRCA1" = "PUJANA_BRCA1_PCC_NETWORK")
pairedGenesList <- list("Akt" = "RIGGI_EWING_SARCOMA_PROGENITOR_UP")
library(correlationAnalyzeR)
onlyTop <- F
topCutoff <- .5
plotLabels <- F
sigTest <- T
autoRug <- T
nPerm <- 2000
outputPrefix = "tests/pairedTestFIVE"
plotMaxMinCorr <- T
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Ensure input data is correct
if (typeof(pairedGenesList) != "list" | is.null(names(pairedGenesList))) {
stop("\tFormat pairedGenesList as a named list in which:
1) Names are the primary genes of interest.
2) List values contain vectors of secondary genes to compare against -- OR
a string with the official MSIGDB name of a geneset to compare against.\n
e.g. pairedGenesList = list('TP53' = c('BRCA1', 'CDK12', 'PARP1'),
'SON' = c('DHX9'),
'MCM2' = c('PCNA', 'STAG2'))  \n")
}
# Initialize results object
resList <- list()
# Check primary genes to make sure they exist
avGenes <- correlationAnalyzeR::getAvailableGenes(Species = Species)
avGenes <- as.character(avGenes$geneName)
intGenes <- names(pairedGenesList)
badGenes <- intGenes[which(! intGenes %in% avGenes)]
if (length(badGenes) > 0) {
stop(paste0("\n\t\t\t'", paste(badGenes, collapse = ", "), "' not found
in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
# Check secondary genes to make sure they exist -- only a warning
intGenes_secondary <- unlist(pairedGenesList, use.names = T)
# pairedGenesList <- list("ATM" = "MIYAGAWA_TARGETS_OF_EWSR1_ETS_FUSIONS_UP",
#                         "SON" = "TORCHIA_TARGETS_OF_EWSR1_FLI1_FUSION_UP",
#                         "BRCA1" = "BILD_E2F3_ONCOGENIC_SIGNATURE")
# pairedGenesList <- list("ATM" = c("TP53", "NFE2L2", "BRCA2"))
# pairedGenesList <- list("BRCA1" = "PUJANA_BRCA1_PCC_NETWORK")
pairedGenesList <- list("Akt1" = "RIGGI_EWING_SARCOMA_PROGENITOR_UP")
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Ensure input data is correct
if (typeof(pairedGenesList) != "list" | is.null(names(pairedGenesList))) {
stop("\tFormat pairedGenesList as a named list in which:
1) Names are the primary genes of interest.
2) List values contain vectors of secondary genes to compare against -- OR
a string with the official MSIGDB name of a geneset to compare against.\n
e.g. pairedGenesList = list('TP53' = c('BRCA1', 'CDK12', 'PARP1'),
'SON' = c('DHX9'),
'MCM2' = c('PCNA', 'STAG2'))  \n")
}
# Initialize results object
resList <- list()
# Check primary genes to make sure they exist
avGenes <- correlationAnalyzeR::getAvailableGenes(Species = Species)
avGenes <- as.character(avGenes$geneName)
intGenes <- names(pairedGenesList)
badGenes <- intGenes[which(! intGenes %in% avGenes)]
if (length(badGenes) > 0) {
stop(paste0("\n\t\t\t'", paste(badGenes, collapse = ", "), "' not found
in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
# Check secondary genes to make sure they exist -- only a warning
intGenes_secondary <- unlist(pairedGenesList, use.names = T)
badGenes_secondary <- intGenes_secondary[
which(! intGenes_secondary %in% avGenes &
! intGenes_secondary %in% correlationAnalyzeR::MSIGDB_Geneset_Names)
]
if (length(badGenes_secondary) > 0) {
warning(paste0("\n\t\t\t'", paste(badGenes_secondary, collapse = ", "), "'
not found in correlation data and is not an official MSIGDB name.
Please check available gene data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier. Find offical MSIGDB
names by examining the MSIGDB_Geneset_Names object.\n
Continuing without this/these gene(s)..."))
}
# Make list of terms inputted by the user
termGenes_secondary <- intGenes_secondary[
which(! intGenes_secondary %in% avGenes &
intGenes_secondary %in% correlationAnalyzeR::MSIGDB_Geneset_Names)
]
if (length(termGenes_secondary > 0)) {
if (Species[1] == "hsapiens") {
TERM2GENE <- correlationAnalyzeR::hsapiens_complex_TERM2GENE
colnames(TERM2GENE)[2] <- "gene_symbol"
} else {
TERM2GENE <- correlationAnalyzeR::mmusculus_complex_TERM2GENE
}
for(i in 1:length(termGenes_secondary)) {
term <- termGenes_secondary[i]
print(term)
nameStr <- names(term)
termGenes <- TERM2GENE$gene_symbol[which(TERM2GENE$gs_name == term)]
termGenes <- termGenes[which(termGenes %in% avGenes)] # Ensure actionable genes
pairedGenesList[[nameStr]] <- termGenes
}
}
pairedGenesList
# Call getCorrelationData to get all required files
corrDFFull <- correlationAnalyzeR::getCorrelationData(Species = Species[1],
Sample_Type = Sample_Type[1],
geneList = intGenes)
