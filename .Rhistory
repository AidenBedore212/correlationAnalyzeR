#                         sample(geneNames, 4))
# names(pairedGenesList) <- sample(geneNames, 3)
outputPrefix = "tests/pairedTestOne"
plotMaxMinCorr <- T
# Create output folder
if (! dir.exists(outputPrefix)) {
dir.create(outputPrefix)
}
# Ensure input data is correct
if (typeof(pairedGenesList) != "list" | is.null(names(pairedGenesList))) {
stop("\tFormat pairedGenesList as a named list in which:
1) Names are the primary genes of interest.
2) List values contain vectors of secondary genes to compare against.\n
e.g. pairedGenesList = list('TP53' = c('BRCA1', 'CDK12', 'PARP1'),
'SON' = c('DHX9'),
'MCM2' = c('PCNA', 'STAG2'))  \n")
}
# Initialize results object
resList <- list()
# Initialize correct correlation data directory
if (Species[1] == "hsapiens") {
if (Sample_Type[1] == "All") {
dataDir <- "data/Correlation_Data/hsapiens/Human_All_Samples"
} else if (Sample_Type[1] == "Normal_Tissues") {
dataDir <- "data/Correlation_Data/hsapiens/Human_Normal_Tissues"
} else if (Sample_Type[1] == "Tumor_Tissues") {
dataDir <- "data/Correlation_Data/hsapiens/Human_Tumor_Tissues"
} else {
stop("\n\t\tPlease enter select from allowed Sample_Type inputs:
'All', 'Normal_Tissues', or 'Tumor_Tissues'\n")
}
} else if (Species[1] == "mmusculus") {
if (Sample_Type[1] == "All") {
dataDir <- "data/Correlation_Data/mmusculus/Mouse_All_Samples"
} else if (Sample_Type[1] == "Normal_Tissues") {
dataDir <- "data/Correlation_Data/mmusculus/Mouse_Normal_Tissues"
} else if (Sample_Type[1] == "Tumor_Tissues") {
dataDir <- "data/Correlation_Data/mmusculus/Mouse_Tumor_Tissues"
} else {
stop("\n\t\tPlease enter select from allowed Sample_Type inputs:
'All', 'Normal_Tissues', or 'Tumor_Tissues'\n")
}
} else {
stop("\ncorrelationAnalyzeR currently supports only Human and Mouse data.
Please select either 'hsapiens' or 'mmusculus' for Species parameter.
\n")
}
i <- 1
primaryGene <- names(pairedGenesList)[i]
print(primaryGene)
gene <- names(pairedGenesList)[i]
cat(paste0("\n", gene))
# Check for the data file for gene
geneFile <- paste0(gene, ".RData")
file <- file.path(dataDir, geneFile)
if(! file.exists(file)) {
warning(paste0("\n\t\t\t'", gene, "' not found in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
next
}
load(file)
# Create output folder for gene
geneOutDir <- file.path(outputPrefix, gene)
if (! dir.exists(geneOutDir)) {
dir.create(geneOutDir)
}
# Initialize results frame
if (i == 1) {
resultsFrame <- data.frame(geneName = names(corr))
}
corrDF <- as.data.frame(corr)
corrDF$geneName <- row.names(corrDF)
colnames(corrDF)[1] <- "correlationValue"
# Filter for secondary genes
secondaryGenes <- pairedGenesList[[i]]
corrDF <- corrDF[which(corrDF$geneName != primaryGene),]
res <- numeric()
his <- ggplot(corrDF, aes(x = correlationValue)) +
geom_histogram(bins = 100, color = "black", fill = "white") +
labs(title = paste0("Histogram of ", primaryGene, " correlations")) +
ylab("Frequency") +
scale_y_continuous(limits = c(0, 7500), expand = c(0,0)) +
theme_classic()
his
if (plotMaxMinCorr) {
maxGene <- corrDF$geneName[which.max(corrDF$correlationValue)]
maxVal <- max(corrDF$correlationValue)
minGene <- corrDF$geneName[which.min(corrDF$correlationValue)]
minVal <- min(corrDF$correlationValue)
maxLab <- paste0(maxGene, " (", round(maxVal, 2), ")\n")
minLab <- paste0("\n", minGene, " (", round(minVal, 2), ")")
# Add in max line
his <- his + geom_vline(xintercept = maxVal, linetype = 3) +
annotate(geom = "text", x = maxVal, y = 4000,
label = maxLab,
color = "black", angle = 90, size = 2)
# Add in min line
his <- his + geom_vline(xintercept = minVal, linetype = 3) +
annotate(geom = "text", x = minVal, y = 4000,
label = minLab,
color = "black", angle = 90, size = 2)
}
his
for (j in 1:length(secondaryGenes)) {
if (! file.exists(paste0("Data/geneCorrelationDataFiles/", secondaryGenes[j], ".RData"))) {
secondaryGenes <- secondaryGenes[c(-j)]
}
}
warning(paste0("\n\t\t\t'", secondaryGenes[j], "' not found in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
for (j in 1:length(secondaryGenes)) {
if (! file.exists(paste0("Data/geneCorrelationDataFiles/", secondaryGenes[j], ".RData"))) {
secondaryGenes <- secondaryGenes[c(-j)]
warning(paste0("\n\t\t\t'", secondaryGenes[j], "' not found in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
}
# Filter for secondary genes
secondaryGenes <- pairedGenesList[[i]]
corrDF <- corrDF[which(corrDF$geneName != primaryGene),]
res <- numeric()
# Create histogram of gene correlations
his <- ggplot(corrDF, aes(x = correlationValue)) +
geom_histogram(bins = 100, color = "black", fill = "white") +
labs(title = paste0("Histogram of ", primaryGene, " correlations")) +
ylab("Frequency") +
scale_y_continuous(limits = c(0, 7500), expand = c(0,0)) +
theme_classic()
# Add min-max vals
if (plotMaxMinCorr) {
maxGene <- corrDF$geneName[which.max(corrDF$correlationValue)]
maxVal <- max(corrDF$correlationValue)
minGene <- corrDF$geneName[which.min(corrDF$correlationValue)]
minVal <- min(corrDF$correlationValue)
maxLab <- paste0(maxGene, " (", round(maxVal, 2), ")\n")
minLab <- paste0("\n", minGene, " (", round(minVal, 2), ")")
# Add in max line
his <- his + geom_vline(xintercept = maxVal, linetype = 3) +
annotate(geom = "text", x = maxVal, y = 4000,
label = maxLab,
color = "black", angle = 90, size = 2)
# Add in min line
his <- his + geom_vline(xintercept = minVal, linetype = 3) +
annotate(geom = "text", x = minVal, y = 4000,
label = minLab,
color = "black", angle = 90, size = 2)
}
for (j in 1:length(secondaryGenes)) {
if (! file.exists(paste0("Data/geneCorrelationDataFiles/", secondaryGenes[j], ".RData"))) {
secondaryGenes <- secondaryGenes[c(-j)]
warning(paste0("\n\t\t\t'", secondaryGenes[j], "' not found in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
}
if (! file.exists(dataDir, paste0(secondaryGenes[j], ".RData"))) {
secondaryGenes <- secondaryGenes[c(-j)]
warning(paste0("\n\t\t\t'", secondaryGenes[j], "' not found in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
if (! file.exists(file.path(dataDir, paste0(secondaryGenes[j], ".RData")))) {
secondaryGenes <- secondaryGenes[c(-j)]
warning(paste0("\n\t\t\t'", secondaryGenes[j], "' not found in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
file.path(dataDir, paste0(secondaryGenes[j], ".RData"))
# Filter for secondary genes
secondaryGenes <- pairedGenesList[[i]]
j <- 1
file.path(dataDir, paste0(secondaryGenes[j], ".RData"))
if (! file.exists(file.path(dataDir, paste0(secondaryGenes[j], ".RData")))) {
secondaryGenes <- secondaryGenes[c(-j)]
warning(paste0("\n\t\t\t'", secondaryGenes[j], "' not found in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
for (j in 1:length(secondaryGenes)) {
if (! file.exists(file.path(dataDir, paste0(secondaryGenes[j], ".RData")))) {
secondaryGenes <- secondaryGenes[c(-j)]
warning(paste0("\n\t\t\t'", secondaryGenes[j], "' not found in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
}
corrDF <- corrDF[which(corrDF$geneName %in% secondaryGenes),]
# Harmonize original corrDF frame
corrDF <- corrDF[which(corrDF$geneName %in% secondaryGenes),]
# Choose top genes
if (onlyTop) {
corrDF <- corrDF[order(abs(corrDF$correlationValue), decreasing = T),]
takeNum <- round(length(corrDF$geneName) * (1-topCutoff))
corrDF <- corrDF[c(1:takeNum),]
}
secondaryGenes <- corrDF$geneName
errorCounter <- 0
# Code to analyze how histogram should be formatted
for (j in 1:length(secondaryGenes)) {
secondaryGene <- secondaryGenes[j]
corrVal <- corrDF$correlationValue[which(corrDF$geneName == secondaryGene)]
corrPrev <- which(abs(round(corrVal,2) - round(res, 2)) < .02)
if (length(corrPrev) == 1) {
corrPrevVal <- res[corrPrev]
if (corrPrevVal < corrVal ) {
# Code to change direction of label if new corr val is greater
ind <- (corrPrev-errorCounter)*2 + 1
his$layers[[ind]]$aes_params$label <- paste0(substr(his$layers[[ind]]$aes_params$label, 2, 100), "\n")
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
} else {
label <- paste0(secondaryGene, " (", round(corrVal, 2), ")\n")
}
} else if (length(corrPrev) > 1) {
warning(paste0("Difficulty plotting with labels for ", primaryGene, " -- more than two values are similar"))
corrPrevVal <- res[corrPrev[1]]
if (corrPrevVal < corrVal ) {
# Code to change direction of label if new corr val is greater
ind <- corrPrev*2 + 1
ind <- ind[1]
his$layers[[ind]]$aes_params$label <- paste0(substr(his$layers[[ind]]$aes_params$label, 2, 100), "\n")
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
} else {
label <- paste0(secondaryGene, " (", round(corrVal, 2), ")\n")
}
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
} else {
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
}
if (abs(corrVal) < .15) {
his <- his +
geom_vline(xintercept = corrVal, linetype = 3) +
annotate(geom = "text", x = corrVal, y = sample(c(4000:6500), 1),
label = label,
color = "red", angle = 90, size = 2)
} else {
his <- his +
geom_vline(xintercept = corrVal, linetype = 3) +
annotate(geom = "text", x = corrVal, y = sample(c(1500:2700), 1),
label = label,
color = "red", angle = 90, size = 2)
}
res[j] <- corrVal
}
# Finalizes histogram
his <- his + theme(text = element_text(size = 10))
his
ggsave(plot = his, filename = file.path(geneOutDir, paste0(primaryGene, ".png")))
names(res) <- secondaryGenes
resList[[i]] <- res
names(resList)[i] <- primaryGene
sigTest <- T
load(file)
badSamples <- c(primaryGene, pairedGenesList[[i]])
origSamples <- c(primaryGene, pairedGenesList[[i]])
randGenesVec <- sample(corrDF$geneName[which(! corrDF$geneName %in% origSamples)],
length(corrVal$geneName))
randGenesVec <- sample(corrDF$geneName[which(! corrDF$geneName %in% origSamples)],
length(corrVal$geneName))
randGenesVec <- sample(corrDF$geneName[which(! corrDF$geneName %in% origSamples)],
length(res))
length(res)
ss <- corrDF$geneName[which(! corrDF$geneName %in% origSamples)]
ss
corrDF$geneName
randGenesVec <- sample(names(corr)[which(! names(corr) %in% origSamples)],
length(res))
corr[randGenesVec]
corrRand <- data.frame("randomGenes" = randGenesVec,
"correlationValue" = corr[randGenesVec])
View(corrRand)
# Convert to dataframe
corrRand <- data.frame("geneName" = randGenesVec,
"correlationValue" = corr[randGenesVec])
corrRand$Group <- "randomGenes"
res
res <- as.data.frame(res)
View(res)
res$geneName <- rownames(res)
res$Group <- "testGenes"
corrTest <- rbind(res, corrRand)
# Build dataframe for result values
res <- data.frame("geneName" = names(res),
"correlationValue" = as.numeric(res))
# Code to analyze how histogram should be formatted
for (j in 1:length(secondaryGenes)) {
secondaryGene <- secondaryGenes[j]
corrVal <- corrDF$correlationValue[which(corrDF$geneName == secondaryGene)]
corrPrev <- which(abs(round(corrVal,2) - round(res, 2)) < .02)
if (length(corrPrev) == 1) {
corrPrevVal <- res[corrPrev]
if (corrPrevVal < corrVal ) {
# Code to change direction of label if new corr val is greater
ind <- (corrPrev-errorCounter)*2 + 1
his$layers[[ind]]$aes_params$label <- paste0(substr(his$layers[[ind]]$aes_params$label, 2, 100), "\n")
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
} else {
label <- paste0(secondaryGene, " (", round(corrVal, 2), ")\n")
}
} else if (length(corrPrev) > 1) {
warning(paste0("Difficulty plotting with labels for ", primaryGene, " -- more than two values are similar"))
corrPrevVal <- res[corrPrev[1]]
if (corrPrevVal < corrVal ) {
# Code to change direction of label if new corr val is greater
ind <- corrPrev*2 + 1
ind <- ind[1]
his$layers[[ind]]$aes_params$label <- paste0(substr(his$layers[[ind]]$aes_params$label, 2, 100), "\n")
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
} else {
label <- paste0(secondaryGene, " (", round(corrVal, 2), ")\n")
}
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
} else {
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
}
if (abs(corrVal) < .15) {
his <- his +
geom_vline(xintercept = corrVal, linetype = 3) +
annotate(geom = "text", x = corrVal, y = sample(c(4000:6500), 1),
label = label,
color = "red", angle = 90, size = 2)
} else {
his <- his +
geom_vline(xintercept = corrVal, linetype = 3) +
annotate(geom = "text", x = corrVal, y = sample(c(1500:2700), 1),
label = label,
color = "red", angle = 90, size = 2)
}
res[j] <- corrVal
}
res
res <- numeric()
# Code to analyze how histogram should be formatted
for (j in 1:length(secondaryGenes)) {
secondaryGene <- secondaryGenes[j]
corrVal <- corrDF$correlationValue[which(corrDF$geneName == secondaryGene)]
corrPrev <- which(abs(round(corrVal,2) - round(res, 2)) < .02)
if (length(corrPrev) == 1) {
corrPrevVal <- res[corrPrev]
if (corrPrevVal < corrVal ) {
# Code to change direction of label if new corr val is greater
ind <- (corrPrev-errorCounter)*2 + 1
his$layers[[ind]]$aes_params$label <- paste0(substr(his$layers[[ind]]$aes_params$label, 2, 100), "\n")
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
} else {
label <- paste0(secondaryGene, " (", round(corrVal, 2), ")\n")
}
} else if (length(corrPrev) > 1) {
warning(paste0("Difficulty plotting with labels for ", primaryGene, " -- more than two values are similar"))
corrPrevVal <- res[corrPrev[1]]
if (corrPrevVal < corrVal ) {
# Code to change direction of label if new corr val is greater
ind <- corrPrev*2 + 1
ind <- ind[1]
his$layers[[ind]]$aes_params$label <- paste0(substr(his$layers[[ind]]$aes_params$label, 2, 100), "\n")
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
} else {
label <- paste0(secondaryGene, " (", round(corrVal, 2), ")\n")
}
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
} else {
label <- paste0("\n", secondaryGene, " (", round(corrVal, 2), ")")
}
if (abs(corrVal) < .15) {
his <- his +
geom_vline(xintercept = corrVal, linetype = 3) +
annotate(geom = "text", x = corrVal, y = sample(c(4000:6500), 1),
label = label,
color = "red", angle = 90, size = 2)
} else {
his <- his +
geom_vline(xintercept = corrVal, linetype = 3) +
annotate(geom = "text", x = corrVal, y = sample(c(1500:2700), 1),
label = label,
color = "red", angle = 90, size = 2)
}
res[j] <- corrVal
}
# Finalizes histogram
his <- his + theme(text = element_text(size = 10))
ggsave(plot = his, filename = file.path(geneOutDir, paste0(primaryGene, ".png")))
names(res) <- secondaryGenes
resList[[i]] <- res
names(resList)[i] <- primaryGene
# Significance testing
if (sigTest) {
origSamples <- c(primaryGene, pairedGenesList[[i]])
# Get random sample of the same size as user input
randGenesVec <- sample(names(corr)[which(! names(corr) %in% origSamples)],
length(res))
# Convert to dataframe
corrRand <- data.frame("geneName" = randGenesVec,
"correlationValue" = corr[randGenesVec])
corrRand$Group <- "randomGenes"
# Build dataframe for result values
res <- data.frame("geneName" = names(res),
"correlationValue" = as.numeric(res))
res$Group <- "testGenes"
corrTest <- rbind(res, corrRand)
corrTest$correlationValue <- abs(corrTest$correlationValue)
bp <- ggboxplot(data = corrTest, x = "Group", y = "correlationValue",
color = "Group", palette = "jco", ylab = "Absolute Correlation Value",
xlab = "Comparison Group",
title = paste0(primaryGene, " Gene Correlation Significance Test")) +
stat_compare_means(method = "t.test", paired = F, label = "p.signif",
comparisons = list(c("selectedGenes", "randomGenes"))) +
rremove("legend")
ggsave(plot = bp, filename = file.path(outputPrefix, paste0(primaryGene, ".sigTest.png")))
resSave <- paste0(primaryGene, "_T.Test")
corrTest$Group <- factor(corrTest$Group)
tt <- t.test(x = corrTest$correlationValue[which(corrTest$Group == "selectedGenes")],
y = corrTest$correlationValue[which(corrTest$Group == "randomGenes")], paired = F)
saveVals <- list("t.test" = tt,
"correlationTestValues" = corrTest)
resList[[resSave]] <- saveVals
}
origSamples <- c(primaryGene, pairedGenesList[[i]])
# Get random sample of the same size as user input
randGenesVec <- sample(names(corr)[which(! names(corr) %in% origSamples)],
length(res))
# Convert to dataframe
corrRand <- data.frame("geneName" = randGenesVec,
"correlationValue" = corr[randGenesVec])
corrRand$Group <- "randomGenes"
# Build dataframe for result values
res <- data.frame("geneName" = names(res),
"correlationValue" = as.numeric(res))
View(res)
corrTest <- rbind(res, corrRand)
View(corrTest)
corrTest$correlationValue <- abs(corrTest$correlationValue)
bp <- ggboxplot(data = corrTest, x = "Group", y = "correlationValue",
color = "Group", palette = "jco", ylab = "Absolute Correlation Value",
xlab = "Comparison Group",
title = paste0(primaryGene, " Gene Correlation Significance Test")) +
stat_compare_means(method = "t.test", paired = F, label = "p.signif",
comparisons = list(c("selectedGenes", "randomGenes"))) +
rremove("legend")
bp
bp <- ggboxplot(data = corrTest, x = "Group", y = "correlationValue",
color = "Group", palette = "jco", ylab = "Absolute Correlation Value\n",
title = paste0(primaryGene, " Gene Correlation Significance Test")) +
stat_compare_means(method = "t.test", paired = F, label = "p.signif",
comparisons = list(c("selectedGenes", "randomGenes"))) +
rremove("legend") + rremove('xlab')
bp
bp <- ggboxplot(data = corrTest, x = "Group", y = "correlationValue",
color = "Group", palette = "jco", ylab = "Absolute Correlation Value\n",
title = paste0(primaryGene, " Gene Correlation Significance Test")) +
stat_compare_means(method = "t.test", paired = F, label = "p.signif",
comparisons = list(c("testGenes", "randomGenes"))) +
rremove("legend") + rremove('xlab')
bp
bp <- ggboxplot(data = corrTest, x = "Group", y = "correlationValue",
color = "Group", palette = "jco", ylab = "Absolute Correlation Value\n",
title = paste0(primaryGene, " Gene Correlation Significance Test")) +
stat_compare_means(method = "t.test",
comparisons = list(c("testGenes", "randomGenes"))) +
rremove("legend") + rremove('xlab')
bp
?stat_compare_means
bp <- ggboxplot(data = corrTest, x = "Group", y = "correlationValue",
color = "Group", palette = "jco", ylab = "Absolute Correlation Value\n",
title = paste0(primaryGene, " Gene Correlation Significance Test")) +
stat_compare_means(method = "t.test", label = "p.signif",
method.args = list(alternative = "greater"),
comparisons = list(c("testGenes", "randomGenes"))) +
rremove("legend") + rremove('xlab')
bp
bp <- ggboxplot(data = corrTest, x = "Group", y = "correlationValue",
color = "Group", palette = "jco", ylab = "Absolute Correlation Value\n",
title = paste0(primaryGene, " Gene Correlation Significance Test")) +
stat_compare_means(method = "t.test",
method.args = list(alternative = "greater"),
comparisons = list(c("testGenes", "randomGenes"))) +
rremove("legend") + rremove('xlab')
bp
bp <- ggboxplot(data = corrTest, x = "Group", y = "correlationValue",
color = "Group", palette = "jco", ylab = "Absolute Correlation Value\n",
title = paste0(primaryGene, " Gene Correlation Significance Test")) +
stat_compare_means(method.args = list(alternative = "greater"),
comparisons = list(c("testGenes", "randomGenes"))) +
rremove("legend") + rremove('xlab')
bp
bp <- ggboxplot(data = corrTest, x = "Group", y = "correlationValue",
color = "Group", palette = "jco", ylab = "Absolute Correlation Value\n",
title = paste0(primaryGene, " Gene Correlation Significance Test\n")) +
stat_compare_means(method = "t.test",
method.args = list(alternative = "greater"),
comparisons = list(c("testGenes", "randomGenes"))) +
rremove("legend") + rremove('xlab')
bp
ggsave(plot = bp, filename = file.path(outputPrefix, paste0(primaryGene, ".sigTest.png")))
ggsave(plot = bp, filename = file.path(geneOutDir, paste0(primaryGene, ".sigTest.png")))
resSave <- paste0(primaryGene, "_T.Test")
corrTest$Group <- factor(corrTest$Group)
tt <- t.test(x = corrTest$correlationValue[which(corrTest$Group == "selectedGenes")], alternative = "greater",
y = corrTest$correlationValue[which(corrTest$Group == "randomGenes")], paired = F)
tt <- t.test(x = corrTest$correlationValue[which(corrTest$Group == "testGenes")],
alternative = "greater",
y = corrTest$correlationValue[which(corrTest$Group == "randomGenes")], paired = F)
tt
