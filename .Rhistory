Tissue = "Group something"
returnDataOnly = F
crossCompareMode =T
whichCompareGroups = "all"
# Parse arguments
geneString <- paste(genesOfInterest, collapse = ", ")
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Load appropriate TERM2GENE file built from msigdbr()
if (Species[1] %in% c("hsapiens", "mmusculus")) {
if (runGSEA) {
if (! GSEA_Type %in% c("simple", "complex")) {
stop("\nPlease enter either 'simple' or 'complex' for GSEA_Type\n")
} else if (GSEA_Type[1] == "simple") {
if (Species[1] == "hsapiens") {
data("hsapiens_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_simple_TERM2GENE
} else {
data("mmusculus_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_simple_TERM2GENE
}
} else {
if (Species[1] == "hsapiens") {
data("hsapiens_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_complex_TERM2GENE
} else {
data("mmusculus_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_complex_TERM2GENE
}
}
}
} else {
stop("\ncorrelationAnalyzeR currently supports only Human and Mouse data.
Please select either 'hsapiens' or 'mmusculus' for Species parameter.
\n")
}
# Check genes to make sure they exist
avGenes <- correlationAnalyzeR::getAvailableGenes(Species = Species)
avGenes <- as.character(avGenes$geneName)
badGenes <- genesOfInterest[which(! genesOfInterest %in% avGenes)]
if (length(badGenes) > 0) {
stop(paste0("\n\t\t\t'", paste(badGenes, collapse = ", "), "' not found
in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
cat("\nRetrieving any missing correlation data...\n")
if (length(Tissue) == 1) {
Tissue <- rep(Tissue, length(genesOfInterest))
} else if (length(Tissue) > 1) {
if (length(Tissue) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Tissue vector.
Tissue vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (length(Sample_Type) == 1) {
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
} else if (length(Sample_Type) > 1) {
if (length(Sample_Type) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Sample_Type vector.
Sample_Type vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (crossCompareMode) {
cat("\nRunning cross comparison mode ... \n")
if (Species == "mmusculus") {
whichCompareGroups <- "normal"
cat("\nOnly normal tissue comparisons available for mouse",
" due to black-listing of cancer groups.\n")
cat("\nContinuing with normal tissues ... \n")
}
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
useBlackList = T)
runGSEA <- F
if(whichCompareGroups != "all") {
availTissue <- availTissue[grep(availTissue,
pattern = whichCompareGroups)]
}
availTissue <- strsplit(availTissue, split = " - ")
Tissue <- sapply(availTissue, "[[", 1)
genesVec <- rep(genesOfInterest, each = length(Tissue))
Tissue <- rep(Tissue, length(genesOfInterest))
Sample_Type <- sapply(availTissue, "[[", 2)
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
genesOfInterest <- genesVec
}
# Call downloadData to get all required files
corrDF <- correlationAnalyzeR::getCorrelationData(Species = Species,
Tissue = Tissue,
Sample_Type = Sample_Type,
geneList = genesOfInterest)
# Parse arguments
geneString <- paste(genesOfInterest, collapse = ", ")
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Load appropriate TERM2GENE file built from msigdbr()
if (Species[1] %in% c("hsapiens", "mmusculus")) {
if (runGSEA) {
if (! GSEA_Type %in% c("simple", "complex")) {
stop("\nPlease enter either 'simple' or 'complex' for GSEA_Type\n")
} else if (GSEA_Type[1] == "simple") {
if (Species[1] == "hsapiens") {
data("hsapiens_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_simple_TERM2GENE
} else {
data("mmusculus_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_simple_TERM2GENE
}
} else {
if (Species[1] == "hsapiens") {
data("hsapiens_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_complex_TERM2GENE
} else {
data("mmusculus_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_complex_TERM2GENE
}
}
}
} else {
stop("\ncorrelationAnalyzeR currently supports only Human and Mouse data.
Please select either 'hsapiens' or 'mmusculus' for Species parameter.
\n")
}
# Check genes to make sure they exist
avGenes <- correlationAnalyzeR::getAvailableGenes(Species = Species)
avGenes <- as.character(avGenes$geneName)
badGenes <- genesOfInterest[which(! genesOfInterest %in% avGenes)]
if (length(badGenes) > 0) {
stop(paste0("\n\t\t\t'", paste(badGenes, collapse = ", "), "' not found
in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
cat("\nRetrieving any missing correlation data...\n")
if (length(Tissue) == 1) {
Tissue <- rep(Tissue, length(genesOfInterest))
} else if (length(Tissue) > 1) {
if (length(Tissue) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Tissue vector.
Tissue vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (length(Sample_Type) == 1) {
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
} else if (length(Sample_Type) > 1) {
if (length(Sample_Type) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Sample_Type vector.
Sample_Type vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (crossCompareMode) {
cat("\nRunning cross comparison mode ... \n")
if (Species == "mmusculus") {
whichCompareGroups <- "normal"
cat("\nOnly normal tissue comparisons available for mouse",
" due to black-listing of cancer groups.\n")
cat("\nContinuing with normal tissues ... \n")
}
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
useBlackList = T)
runGSEA <- F
if(whichCompareGroups != "all") {
availTissue <- availTissue[grep(availTissue,
pattern = whichCompareGroups)]
}
availTissue <- strsplit(availTissue, split = " - ")
Tissue <- sapply(availTissue, "[[", 1)
genesVec <- rep(genesOfInterest, each = length(Tissue))
Tissue <- rep(Tissue, length(genesOfInterest))
Sample_Type <- sapply(availTissue, "[[", 2)
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
genesOfInterest <- genesVec
}
# Call downloadData to get all required files
corrDF <- correlationAnalyzeR::getCorrelationData(Species = Species,
Tissue = Tissue,
Sample_Type = Sample_Type,
geneList = genesOfInterest)
if(crossCompareMode) {
tissue2 <- gsub(Tissue, pattern = "0", replacement = " ")
tissue2 <- stringr::str_to_title(tissue2)
if(whichCompareGroups != "all") {
namesVec <- tissue2
} else {
namesVec <- paste0(tissue2, " - ", stringr::str_to_title(Sample_Type))
}
topName <- paste0(genesOfInterest, "_", Tissue, "_", Sample_Type)
resList <- list()
geneList <- unique(genesOfInterest)
for (i in 1:length(geneList)) {
geneNow <- geneList[i]
resList[[i]] <- list()
names(resList)[i] <- geneNow
inds <- which(genesOfInterest == geneNow)
newDF <- corrDF[,inds]
topNameNow <- topName[inds]
colnames(newDF) <- topNameNow
namesVecNow <- namesVec[inds]
resList[[i]][["correlations"]] <- newDF
newDFNorm <- preprocessCore::normalize.quantiles(as.matrix(newDF))
newDFNorm <- as.data.frame(newDFNorm)
rownames(newDFNorm) <- rownames(newDF)
colnames(newDFNorm) <- colnames(newDF)
newDFNorm$Variance <- matrixStats::rowVars(as.matrix(newDFNorm))
newDFNorm <- newDFNorm[order(newDFNorm$Variance, decreasing = T),]
n <- length(colnames(newDFNorm))
pMat <- newDFNorm[c(1:30),c(-n)]
pMatBig <- newDFNorm[c(1:1000),c(-n)]
titleName <- ifelse(whichCompareGroups == "all", paste0(geneNow,
" correlations across conditions"),
no = ifelse(whichCompareGroups == "normal",
paste0(geneNow,
" correlations across tissue types"),
no = paste0(geneNow,
" correlations across tumor tissues")))
phSmall <- pheatmap::pheatmap(pMat, silent = T,
main = titleName,
labels_col = namesVecNow)
phBig <- pheatmap::pheatmap(pMatBig, silent = T,
show_rownames = F, main = titleName,
labels_col = namesVecNow)
resList[[i]][["heatmapSmall"]] <- phSmall
resList[[i]][["heatmapSmallData"]] <- pMat
resList[[i]][["heatmapBig"]] <- phBig
resList[[i]][["heatmapBigData"]] <- pMatBig
}
return(resList)
}
resList <- list()
Tissue
# Debug/Test
genesOfInterest <- "BRCA1"
GSEA_Type = "None"
runGSEA = F
topPlots = F
outputPrefix = "tests/CorrelationAnalyzeR_Output"
Species = "hsapiens"
Sample_Type = "Group something"
Tissue = "Group something"
returnDataOnly = F
crossCompareMode =T
whichCompareGroups = "all"
# Parse arguments
geneString <- paste(genesOfInterest, collapse = ", ")
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Load appropriate TERM2GENE file built from msigdbr()
if (Species[1] %in% c("hsapiens", "mmusculus")) {
if (runGSEA) {
if (! GSEA_Type %in% c("simple", "complex")) {
stop("\nPlease enter either 'simple' or 'complex' for GSEA_Type\n")
} else if (GSEA_Type[1] == "simple") {
if (Species[1] == "hsapiens") {
data("hsapiens_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_simple_TERM2GENE
} else {
data("mmusculus_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_simple_TERM2GENE
}
} else {
if (Species[1] == "hsapiens") {
data("hsapiens_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_complex_TERM2GENE
} else {
data("mmusculus_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_complex_TERM2GENE
}
}
}
} else {
stop("\ncorrelationAnalyzeR currently supports only Human and Mouse data.
Please select either 'hsapiens' or 'mmusculus' for Species parameter.
\n")
}
# Check genes to make sure they exist
avGenes <- correlationAnalyzeR::getAvailableGenes(Species = Species)
avGenes <- as.character(avGenes$geneName)
badGenes <- genesOfInterest[which(! genesOfInterest %in% avGenes)]
if (length(badGenes) > 0) {
stop(paste0("\n\t\t\t'", paste(badGenes, collapse = ", "), "' not found
in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
cat("\nRetrieving any missing correlation data...\n")
if (length(Tissue) == 1) {
Tissue <- rep(Tissue, length(genesOfInterest))
} else if (length(Tissue) > 1) {
if (length(Tissue) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Tissue vector.
Tissue vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (length(Sample_Type) == 1) {
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
} else if (length(Sample_Type) > 1) {
if (length(Sample_Type) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Sample_Type vector.
Sample_Type vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (crossCompareMode) {
cat("\nRunning cross comparison mode ... \n")
if (Species == "mmusculus") {
whichCompareGroups <- "normal"
cat("\nOnly normal tissue comparisons available for mouse",
" due to black-listing of cancer groups.\n")
cat("\nContinuing with normal tissues ... \n")
}
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
useBlackList = T)
runGSEA <- F
if(whichCompareGroups != "all") {
availTissue <- availTissue[grep(availTissue,
pattern = whichCompareGroups)]
}
availTissue <- strsplit(availTissue, split = " - ")
Tissue <- sapply(availTissue, "[[", 1)
genesVec <- rep(genesOfInterest, each = length(Tissue))
Tissue <- rep(Tissue, length(genesOfInterest))
Sample_Type <- sapply(availTissue, "[[", 2)
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
genesOfInterest <- genesVec
}
# Call downloadData to get all required files
corrDF <- correlationAnalyzeR::getCorrelationData(Species = Species,
Tissue = Tissue,
Sample_Type = Sample_Type,
geneList = genesOfInterest)
if(crossCompareMode) {
tissue2 <- gsub(Tissue, pattern = "0", replacement = " ")
tissue2 <- stringr::str_to_title(tissue2)
if(whichCompareGroups != "all") {
namesVec <- tissue2
} else {
namesVec <- paste0(tissue2, " - ", stringr::str_to_title(Sample_Type))
}
topName <- paste0(genesOfInterest, "_", Tissue, "_", Sample_Type)
resList <- list()
geneList <- unique(genesOfInterest)
for (i in 1:length(geneList)) {
geneNow <- geneList[i]
resList[[i]] <- list()
names(resList)[i] <- geneNow
inds <- which(genesOfInterest == geneNow)
newDF <- corrDF[,inds]
topNameNow <- topName[inds]
colnames(newDF) <- topNameNow
namesVecNow <- namesVec[inds]
resList[[i]][["correlations"]] <- newDF
newDFNorm <- preprocessCore::normalize.quantiles(as.matrix(newDF))
newDFNorm <- as.data.frame(newDFNorm)
rownames(newDFNorm) <- rownames(newDF)
colnames(newDFNorm) <- colnames(newDF)
newDFNorm$Variance <- matrixStats::rowVars(as.matrix(newDFNorm))
newDFNorm <- newDFNorm[order(newDFNorm$Variance, decreasing = T),]
n <- length(colnames(newDFNorm))
pMat <- newDFNorm[c(1:30),c(-n)]
pMatBig <- newDFNorm[c(1:1000),c(-n)]
titleName <- ifelse(whichCompareGroups == "all", paste0(geneNow,
" correlations across conditions"),
no = ifelse(whichCompareGroups == "normal",
paste0(geneNow,
" correlations across tissue types"),
no = paste0(geneNow,
" correlations across tumor tissues")))
phSmall <- pheatmap::pheatmap(pMat, silent = T,
main = titleName,
labels_col = namesVecNow)
phBig <- pheatmap::pheatmap(pMatBig, silent = T,
show_rownames = F, main = titleName,
labels_col = namesVecNow)
resList[[i]][["heatmapSmall"]] <- phSmall
resList[[i]][["heatmapSmallData"]] <- pMat
resList[[i]][["heatmapBig"]] <- phBig
resList[[i]][["heatmapBigData"]] <- pMatBig
}
return(resList)
}
View(resList)
correlations <- resList$BRCA1$correlations
correlations <- cbind(rownames(correlations), correlations)
View(correlations)
colnames(ccorrelations)
colnames(correlations)
names(resList)
names(resList[[1]])
resList[["BRCA1"]][["heatmapSmall"]]
View(availTissue)
availTissue
correlationAnalyzeR::blackListHuman
# # # # # Bug testing
Species <- "hsapiens"
useBlackList <- T
Species <- Species[1]
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
tabs <- DBI::dbListTables(con)
tabs <- tabs[grep(tabs, pattern = paste0("correlations_", Species))]
tabs <- gsub(tabs, pattern = paste0("correlations_", Species, "_"),
replacement = "")
useBlackList
blackList <- ifelse(Species == "hsapiens", correlationAnalyzeR::blackListHuman,
correlationAnalyzeR::blackListMouse)
correlationAnalyzeR::blackListHuman
blackListHuman <- correlationAnalyzeR::blackListHuman
blackListMouse <- correlationAnalyzeR::blackListMouse
blackList <- ifelse(Species == "hsapiens", blackListHuman,
blackListMouse)
blackList
# # # # # Bug testing
Species <- "hsapiens"
useBlackList <- T
Species <- Species[1]
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
tabs <- DBI::dbListTables(con)
tabs <- tabs[grep(tabs, pattern = paste0("correlations_", Species))]
tabs <- gsub(tabs, pattern = paste0("correlations_", Species, "_"),
replacement = "")
if (useBlackList) {
blackListHuman <- correlationAnalyzeR::blackListHuman
blackListMouse <- correlationAnalyzeR::blackListMouse
if (Species == "hsapiens") {
blackList <- blackListHuman
} else {
blackList <- blackListMouse
}
tabs <- tabs[grep(x = tabs, pattern = paste(blackList, collapse = "|"), invert = T)]
}
tabs
# Debug/Test
genesOfInterest <- "BRCA1"
GSEA_Type = "None"
runGSEA = F
topPlots = F
outputPrefix = "tests/CorrelationAnalyzeR_Output"
Species = "hsapiens"
Sample_Type = "Group something"
Tissue = "Group something"
returnDataOnly = F
crossCompareMode =T
whichCompareGroups = "all"
# Debug/Test
genesOfInterest <- "BRCA1"
GSEA_Type = "None"
runGSEA = F
topPlots = F
outputPrefix = "tests/CorrelationAnalyzeR_Output"
Species = "hsapiens"
Sample_Type = "Group something"
Tissue = "Group something"
returnDataOnly = F
crossCompareMode =T
whichCompareGroups = "all"
View(resList)
resList[["BRCA1"]][["heatmapSmall"]]
phSmall
phSmall
print(phSmall)
pMat
phSmall <- pheatmap::pheatmap(pMat, silent = T,
main = titleName,
labels_col = namesVecNow)
pMat
phSmall
phSmall <- pheatmap::pheatmap(pMat, silent = T,
main = titleName, angle_col = 90,
labels_col = namesVecNow)
phSmall
phSmall
phSmall <- pheatmap::pheatmap(pMat, silent = T,
main = titleName, angle_col = 135,
labels_col = namesVecNow)
phSmall <- pheatmap::pheatmap(pMat, silent = T,
main = titleName, angle_col = 315,
labels_col = namesVecNow)
phSmall
phSmall <- pheatmap::pheatmap(pMat, silent = T,
main = titleName, angle_col = 270,
labels_col = namesVecNow)
phSmall
phSmall <- pheatmap::pheatmap(pMat, silent = T,
main = titleName, angle_col = 45,
labels_col = namesVecNow)
phSmall
library(correlationAnalyzeR)
