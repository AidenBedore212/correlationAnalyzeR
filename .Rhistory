geneTwo, " Correlations"),
x = "x", y = "y",
ylab = geneTwoTitle,
xlab = geneOneTitle,
add = "reg.line", size = .1,
# cor.method = "spearman",
cor.coef = T, conf.int = T)
pairRes[["compared"]][["correlationPlot"]] <- gs
phCor <- pheatmap::pheatmap(corHeat, silent = T,
labels_col = c(geneOneTitle, geneTwoTitle),
cluster_rows = T, cluster_cols = F)
pairRes[["compared"]][["correlationVarianceHeatmap"]] <- phCor
phGSEA <- pheatmap::pheatmap(compHeat, silent = T,
labels_col = c(geneOneTitle, geneTwoTitle),
cluster_rows = T,
cluster_cols = F)
pairRes[["compared"]][["correlatedPathwaysHeatmap"]] <- phGSEA
if (! returnDataOnly) {
ggplot2::ggsave(phGSEA, height = 7.5, width = 6,
filename = file.path(outputPrefix,
"GSEA_compared_heatmap.png"))
ggplot2::ggsave(phCor, height = 7.5, width = 4.5,
filename = file.path(outputPrefix,
"correlations_compared_heatmap.png"))
ggplot2::ggsave(gs, filename = file.path(outputPrefix,
"correlationScatterCompare.png"))
}
} else {
gs <- ggpubr::ggscatter(correlations,
title = paste0(geneOne, " vs. ",
geneTwo, " Correlations"),
caption = paste0(tissueOne, " - ", sampleOne),
x = geneOne, y = geneTwo,
ylab = geneTwo,
xlab = geneOne,
add = "reg.line", size = .1,
cor.coef = T, conf.int = T)
pairRes[["compared"]][["correlationPlot"]] <- gs
phCor <- pheatmap::pheatmap(corHeat,
silent = T,
cluster_rows = T, cluster_cols = F)
pairRes[["compared"]][["correlationVarianceHeatmap"]] <- phCor
phGSEA <- pheatmap::pheatmap(compHeat, silent = T,
cluster_rows = T,
labels_col = c(geneOne, geneTwo),
cluster_cols = F)
pairRes[["compared"]][["correlatedPathwaysHeatmap"]] <- phGSEA
if (! returnDataOnly) {
ggplot2::ggsave(phGSEA, 7.5, width = 6,
filename = file.path(outputPrefix,
"GSEA_compared_heatmap.png"))
ggplot2::ggsave(phCor, 7.5, width = 4.5,
filename = file.path(outputPrefix,
"correlations_compared_heatmap.png"))
ggplot2::ggsave(gs, filename = file.path(outputPrefix,
"correlationScatterCompare.png"))
}
}
longName
correlationsScatter <- correlations
colnames(correlationsScatter)[c(1, 2)] <- c("x", "y")
gs <- ggpubr::ggscatter(correlationsScatter,
title = paste0(geneOne, " vs. ",
geneTwo, " Correlations"),
x = "x", y = "y",
ylab = geneTwoTitle,
xlab = geneOneTitle,
add = "reg.line", size = .1,
# cor.method = "spearman",
cor.coef = T, conf.int = T)
pairRes[["compared"]][["correlationPlot"]] <- gs
phCor <- pheatmap::pheatmap(corHeat, silent = T,
labels_col = c(geneOneTitle, geneTwoTitle),
cluster_rows = T, cluster_cols = F)
pairRes[["compared"]][["correlationVarianceHeatmap"]] <- phCor
phGSEA <- pheatmap::pheatmap(compHeat, silent = T,
labels_col = c(geneOneTitle, geneTwoTitle),
cluster_rows = T,
cluster_cols = F)
pairRes[["compared"]][["correlatedPathwaysHeatmap"]] <- phGSEA
if (! returnDataOnly) {
ggplot2::ggsave(phGSEA, height = 7.5, width = 6,
filename = file.path(outputPrefix,
"GSEA_compared_heatmap.png"))
ggplot2::ggsave(phCor, height = 7.5, width = 4.5,
filename = file.path(outputPrefix,
"correlations_compared_heatmap.png"))
ggplot2::ggsave(gs, filename = file.path(outputPrefix,
"correlationScatterCompare.png"))
}
if (! returnDataOnly) {
ggplot2::ggsave(phGSEA, height = 7.5, width = 6,
filename = file.path(outputPrefix,
"GSEA_compared_heatmap.png"))
ggplot2::ggsave(phCor, height = 7.5, width = 4.5,
filename = file.path(outputPrefix,
"correlations_compared_heatmap.png"))
ggplot2::ggsave(gs, filename = file.path(outputPrefix,
"correlationScatterCompare.png"))
}
View(compPaths)
# Debug/Test
genesOfInterest <- c("ATM", "SLC3A2")
GSEA_Type = "simple"
# set.seed(1)
runGSEA = T
outputPrefix = "tests/CorrelationAnalyzeR_Output_paired"
Species = "hsapiens"
Sample_Type = c("normal", "normal")
Tissue = c("brain", "brain")
returnDataOnly = T
topPlots=F
require(dplyr)
require(tibble)
if (length(genesOfInterest) == 2 ) {
pairRes <- correlationAnalyzeR::analyzeSingleGenes(
genesOfInterest = genesOfInterest,
returnDataOnly = returnDataOnly, topPlots = topPlots,
outputPrefix = outputPrefix, runGSEA = runGSEA,
Sample_Type = Sample_Type, Tissue = Tissue,
Species = Species, GSEA_Type = GSEA_Type
)
} else {
stop("Please enter only 2 genes to compare")
}
# Compare correlations -- scatter plot
correlations <- pairRes$correlations
geneOne <- genesOfInterest[1]
tissueOne <- Tissue[1]
sampleOne <- Sample_Type[1]
geneOneTitle <- paste0(geneOne, ", ",
tools::toTitleCase(tissueOne),
" - ",
tools::toTitleCase(sampleOne))
geneTwo <- genesOfInterest[2]
tissueTwo <- Tissue[2]
sampleTwo <- Sample_Type[2]
geneTwoTitle <- paste0(geneTwo, ", ",
tools::toTitleCase(tissueTwo),
" - ",
tools::toTitleCase(sampleTwo))
longName <- ifelse((tissueOne != tissueTwo | sampleOne != sampleTwo),
yes = T, no = F)
pairRes[["compared"]] <- list()
# Variance heat map
correlations$average <- rowMeans(correlations)
correlations$variance <- matrixStats::rowVars(as.matrix(correlations[,c(1,2)]))
correlations <- correlations[order(correlations$variance,
decreasing = T),]
pairRes[["compared"]][["correlations"]] <- correlations
cn <- colnames(correlations)
correlations2 <- correlations[which(! rownames(correlations) %in%
colnames(correlations)),]
corHeatOne <- correlations2 %>%
rownames_to_column('gene') %>%
dplyr::filter(eval(parse(text = cn[1])) > 0) %>%
top_n(15, variance) %>%
column_to_rownames('gene')
corHeatTwo <- correlations2 %>%
rownames_to_column('gene') %>%
dplyr::filter(eval(parse(text = cn[1])) < 0) %>%
top_n(15, variance) %>%
column_to_rownames('gene')
corHeat <- rbind(corHeatOne, corHeatTwo)
corHeat <- corHeat[, c(1, 2)]
# GSEA compare -- heatmap
compPaths <- merge( x= pairRes[[geneOneTitle]][["GSEA"]][["eres"]],
y = pairRes[[geneTwoTitle]][["GSEA"]][["eres"]],
by = c("ID", "Description"))
geneOneTitle
runGSEA
GSEA_Type
if (length(genesOfInterest) == 2 ) {
pairRes <- correlationAnalyzeR::analyzeSingleGenes(
genesOfInterest = genesOfInterest,
returnDataOnly = returnDataOnly, topPlots = topPlots,
outputPrefix = outputPrefix, runGSEA = runGSEA,
Sample_Type = Sample_Type, Tissue = Tissue,
Species = Species, GSEA_Type = GSEA_Type
)
} else {
stop("Please enter only 2 genes to compare")
}
View(pairRes)
# Parse arguments
geneString <- paste(genesOfInterest, collapse = ", ")
# Fix possible parameter conflict
if (returnDataOnly) {
runGSEA <- F
}
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Load appropriate TERM2GENE file built from msigdbr()
if (Species[1] %in% c("hsapiens", "mmusculus")) {
if (runGSEA) {
if (! GSEA_Type %in% c("simple", "complex")) {
stop("\nPlease enter either 'simple' or 'complex' for GSEA_Type\n")
} else if (GSEA_Type[1] == "simple") {
if (Species[1] == "hsapiens") {
data("hsapiens_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_simple_TERM2GENE
} else {
data("mmusculus_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_simple_TERM2GENE
}
} else {
if (Species[1] == "hsapiens") {
data("hsapiens_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_complex_TERM2GENE
} else {
data("mmusculus_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_complex_TERM2GENE
}
}
}
} else {
stop("\ncorrelationAnalyzeR currently supports only Human and Mouse data.
Please select either 'hsapiens' or 'mmusculus' for Species parameter.
\n")
}
runGSEA
# Parse arguments
geneString <- paste(genesOfInterest, collapse = ", ")
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Load appropriate TERM2GENE file built from msigdbr()
if (Species[1] %in% c("hsapiens", "mmusculus")) {
if (runGSEA) {
if (! GSEA_Type %in% c("simple", "complex")) {
stop("\nPlease enter either 'simple' or 'complex' for GSEA_Type\n")
} else if (GSEA_Type[1] == "simple") {
if (Species[1] == "hsapiens") {
data("hsapiens_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_simple_TERM2GENE
} else {
data("mmusculus_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_simple_TERM2GENE
}
} else {
if (Species[1] == "hsapiens") {
data("hsapiens_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_complex_TERM2GENE
} else {
data("mmusculus_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_complex_TERM2GENE
}
}
}
} else {
stop("\ncorrelationAnalyzeR currently supports only Human and Mouse data.
Please select either 'hsapiens' or 'mmusculus' for Species parameter.
\n")
}
# Check genes to make sure they exist
avGenes <- correlationAnalyzeR::getAvailableGenes(Species = Species)
avGenes <- as.character(avGenes$geneName)
badGenes <- genesOfInterest[which(! genesOfInterest %in% avGenes)]
if (length(badGenes) > 0) {
stop(paste0("\n\t\t\t'", paste(badGenes, collapse = ", "), "' not found
in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
cat("\nRetrieving any missing correlation data...\n")
if (length(Tissue) == 1) {
Tissue <- rep(Tissue, length(genesOfInterest))
} else if (length(Tissue) > 1) {
if (length(Tissue) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Tissue vector.
Tissue vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (length(Sample_Type) == 1) {
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
} else if (length(Sample_Type) > 1) {
if (length(Sample_Type) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Sample_Type vector.
Sample_Type vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
# Call downloadData to get all required files
corrDF <- correlationAnalyzeR::getCorrelationData(Species = Species,
Tissue = Tissue,
Sample_Type = Sample_Type,
geneList = genesOfInterest)
resList <- list()
# Main code
for (i in 1:length(colnames(corrDF))) {
gene <- colnames(corrDF)[i]
cat(paste0("\n", gene))
# Create output folder for gene
geneOutDir <- file.path(outputPrefix, gene)
if (! dir.exists(geneOutDir) & ! returnDataOnly) {
dir.create(geneOutDir)
}
# Remove gene from correlation values to build normal distribution
vec <- corrDF[,i]
names(vec) <- rownames(corrDF)
vec <- vec[order(vec, decreasing = T)]
vec <- vec[c(-1)]
# Make a histogram of gene correlations
corrDF2 <- corrDF[which(rownames(corrDF) != gene),i, drop = F]
geneOne <- genesOfInterest[i]
tissueOne <- Tissue[i]
sampleOne <- Sample_Type[i]
geneOneTitle <- paste0(geneOne, ", ",
tools::toTitleCase(tissueOne),
" - ",
tools::toTitleCase(sampleOne))
p <- ggpubr::gghistogram(data = corrDF2, x = gene, y = "..count..",
bins = 100, ylab = "Frequency\n",
title = gene,
caption = paste0(tools::toTitleCase(tissueOne),
" - ",
tools::toTitleCase(sampleOne)),
xlab = paste0(gene, " correlation values"))
resList[[i]] <- list()
names(resList)[i] <- geneOneTitle
geneOneTitleFile <- gsub(pattern = ",| |-", replacement = "", x = geneOneTitle)
resList[[geneOneTitle]][["corrHist"]] <- p
if (! returnDataOnly) {
ggplot2::ggsave(filename = file.path(geneOutDir,
paste0(geneOneTitleFile, ".png")),
plot = p)
}
if (runGSEA) {
# Perform GSEA
cat("\nGSEA\n")
resGSEA <- suppressWarnings(
correlationAnalyzeR::myGSEA(ranks = vec, TERM2GENE = TERM2GENE,
plotFile = paste0(geneOneTitleFile,
".corrPathways"),
outDir = geneOutDir,
topPlots = topPlots,
returnDataOnly = returnDataOnly,
Condition = paste0(geneOneTitle,
": Correlated Genes"))
)
resList[[geneOneTitle]][["GSEA"]] <- resGSEA
}
}
runGSEA <- T
# Parse arguments
geneString <- paste(genesOfInterest, collapse = ", ")
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Load appropriate TERM2GENE file built from msigdbr()
if (Species[1] %in% c("hsapiens", "mmusculus")) {
if (runGSEA) {
if (! GSEA_Type %in% c("simple", "complex")) {
stop("\nPlease enter either 'simple' or 'complex' for GSEA_Type\n")
} else if (GSEA_Type[1] == "simple") {
if (Species[1] == "hsapiens") {
data("hsapiens_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_simple_TERM2GENE
} else {
data("mmusculus_simple_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_simple_TERM2GENE
}
} else {
if (Species[1] == "hsapiens") {
data("hsapiens_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::hsapiens_complex_TERM2GENE
} else {
data("mmusculus_complex_TERM2GENE")
TERM2GENE <- correlationAnalyzeR::mmusculus_complex_TERM2GENE
}
}
}
} else {
stop("\ncorrelationAnalyzeR currently supports only Human and Mouse data.
Please select either 'hsapiens' or 'mmusculus' for Species parameter.
\n")
}
# Check genes to make sure they exist
avGenes <- correlationAnalyzeR::getAvailableGenes(Species = Species)
avGenes <- as.character(avGenes$geneName)
badGenes <- genesOfInterest[which(! genesOfInterest %in% avGenes)]
if (length(badGenes) > 0) {
stop(paste0("\n\t\t\t'", paste(badGenes, collapse = ", "), "' not found
in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
cat("\nRetrieving any missing correlation data...\n")
if (length(Tissue) == 1) {
Tissue <- rep(Tissue, length(genesOfInterest))
} else if (length(Tissue) > 1) {
if (length(Tissue) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Tissue vector.
Tissue vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (length(Sample_Type) == 1) {
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
} else if (length(Sample_Type) > 1) {
if (length(Sample_Type) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Sample_Type vector.
Sample_Type vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
# Call downloadData to get all required files
corrDF <- correlationAnalyzeR::getCorrelationData(Species = Species,
Tissue = Tissue,
Sample_Type = Sample_Type,
geneList = genesOfInterest)
resList <- list()
# Main code
for (i in 1:length(colnames(corrDF))) {
gene <- colnames(corrDF)[i]
cat(paste0("\n", gene))
# Create output folder for gene
geneOutDir <- file.path(outputPrefix, gene)
if (! dir.exists(geneOutDir) & ! returnDataOnly) {
dir.create(geneOutDir)
}
# Remove gene from correlation values to build normal distribution
vec <- corrDF[,i]
names(vec) <- rownames(corrDF)
vec <- vec[order(vec, decreasing = T)]
vec <- vec[c(-1)]
# Make a histogram of gene correlations
corrDF2 <- corrDF[which(rownames(corrDF) != gene),i, drop = F]
geneOne <- genesOfInterest[i]
tissueOne <- Tissue[i]
sampleOne <- Sample_Type[i]
geneOneTitle <- paste0(geneOne, ", ",
tools::toTitleCase(tissueOne),
" - ",
tools::toTitleCase(sampleOne))
p <- ggpubr::gghistogram(data = corrDF2, x = gene, y = "..count..",
bins = 100, ylab = "Frequency\n",
title = gene,
caption = paste0(tools::toTitleCase(tissueOne),
" - ",
tools::toTitleCase(sampleOne)),
xlab = paste0(gene, " correlation values"))
resList[[i]] <- list()
names(resList)[i] <- geneOneTitle
geneOneTitleFile <- gsub(pattern = ",| |-", replacement = "", x = geneOneTitle)
resList[[geneOneTitle]][["corrHist"]] <- p
if (! returnDataOnly) {
ggplot2::ggsave(filename = file.path(geneOutDir,
paste0(geneOneTitleFile, ".png")),
plot = p)
}
if (runGSEA) {
# Perform GSEA
cat("\nGSEA\n")
resGSEA <- suppressWarnings(
correlationAnalyzeR::myGSEA(ranks = vec, TERM2GENE = TERM2GENE,
plotFile = paste0(geneOneTitleFile,
".corrPathways"),
outDir = geneOutDir,
topPlots = topPlots,
returnDataOnly = returnDataOnly,
Condition = paste0(geneOneTitle,
": Correlated Genes"))
)
resList[[geneOneTitle]][["GSEA"]] <- resGSEA
}
}
View(corrDF)
library(correlationAnalyzeR)
phCor <- pheatmap::pheatmap(t(corHeat), silent = T,
labels_col = c(geneOneTitle, geneTwoTitle),
cluster_rows = F, cluster_cols = T)
phCor
phGSEA <- pheatmap::pheatmap(compHeat, silent = T,
labels_row = c(geneOneTitle, geneTwoTitle),
cluster_rows = T,
cluster_cols = F)
phCor <- pheatmap::pheatmap(t(corHeat), silent = T,
labels_row = c(geneOneTitle, geneTwoTitle),
cluster_rows = F, cluster_cols = T)
phCor
phCor
phCor <- pheatmap::pheatmap(corHeat, silent = T, angle_col = 45,
labels_col = c(geneOneTitle, geneTwoTitle),
cluster_rows = T, cluster_cols = F)
phCor
geneOneTitle
geneTwoTitle
phCor <- pheatmap::pheatmap(corHeat, silent = T, angle_col = 75,
labels_col = c(geneOneTitle, geneTwoTitle),
cluster_rows = T, cluster_cols = F)
phCor <- pheatmap::pheatmap(corHeat, silent = T, angle_col = 90,
labels_col = c(geneOneTitle, geneTwoTitle),
cluster_rows = T, cluster_cols = F)
phCor
phCor <- pheatmap::pheatmap(corHeat, silent = T, angle_col = 0,
labels_col = c(geneOneTitle, geneTwoTitle),
cluster_rows = T, cluster_cols = F)
phCor
library(correlationAnalyzeR)
View(corrDF)
