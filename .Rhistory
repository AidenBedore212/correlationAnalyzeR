rownames(df_up) <- ie_up$Entry
df_up <- apply(df_up, 1:2, as.numeric)
ie_dn <- SuperExactTest::intersectElements(compList_dn)
barCode_dn <- strsplit(as.character(ie_dn$barcode), "")
df_dn <- data.frame(matrix(unlist(barCode_dn), nrow=length(barCode_dn), byrow=T))
rownames(df_dn) <- ie_dn$Entry
df_dn <- apply(df_dn, 1:2, as.numeric)
olGenes_determine <- function(df, setComparisonCutoff) {
# Get genes with at least n overlaps, determined by setComparisonCutoff
olGenes <- rownames(df)[which(rowSums(df) > setComparisonCutoff)]
if (length(olGenes) < 10) {
warning("Comparison cutoff value too high -- adjusted down for set analysis")
olGenes <- rownames(df)[which(rowSums(df) > setComparisonCutoff-1)]
}
if (length(olGenes) < 10) {
olGenes <- rownames(df)[which(rowSums(df) > setComparisonCutoff-2)]
}
if (length(olGenes) < 10) {
olGenes <- rownames(df)[which(rowSums(df) > setComparisonCutoff-3)]
}
return(olGenes)
}
olGenes_up <- olGenes_determine(df = df_up, setComparisonCutoff = setComparisonCutoff)
olGenes_dn <- olGenes_determine(df = df_dn, setComparisonCutoff = setComparisonCutoff)
olGenes <- unique(c(olGenes_up, olGenes_dn))
select <- which(rownames(resultsMat) %in% olGenes)
olMat <- resultsMat[select,]
cocorheatmap <- pheatmap::pheatmap(olMat, color = gplots::redgreen(100), show_rownames = F,
main = "Co-Correlative Genes", silent = T,
width = width, height = height)
resList[["cocorrelativeGenesHeatmap"]] <- cocorheatmap
resList[["cocorrelativeGenesHeatmap_MAT"]] <- olMat
# # Test with a smaller subset
# olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-1)]
# # If too few genes overlapping
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-2)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-3)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-4)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-5)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-6)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-8)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-10)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-14)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-18)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-24)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-32)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-42)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-50)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-60)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-75)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-95)]
# }
# if (length(olGenesSmall) < 10) {
#   olGenesSmall <- rownames(df)[which(rowSums(df) > length(compList)-120)]
# }
# # If too many genes overlapping
# if (length(olGenesSmall) > numTopGenesToPlot) {
#   select <- which(rownames(resultsMat) %in% olGenesSmall)
#   olMat <- topGenes[select,]
#   # Get the top rowSums
#   olRows <- rowSums(olMat)
#   olRows <- olRows[order(olRows, decreasing = T)]
#   olGenesSmall <- names(olRows)[c(1:numTopGenesToPlot)]
# }
# select <- which(rownames(resultsMat) %in% olGenesSmall)
# olMat <- resultsMat[select,]
# pheatmap(olMat, color = redgreen(100), show_rownames = T,
#          main = "Heatmap of Genes of Interest by Top Co-Correlative Genes",
#          filename = file.path(crossDir, "TopCoCorrelativeGenesHeatmap.png"),
#          width = width, height = height)
# Perform pathway enrichment with Co-Correlative genes
CCGenesEGMT <- clusterProfiler::enricher(gene = olGenes, TERM2GENE = TERM2GENE)
eres <- as.data.frame(CCGenesEGMT)
resList[["coCorrelativeGenes_pathways"]] <- eres
# Modify gene set names to fit plotting window
CCGenesEGMT@result$Description[which(nchar(CCGenesEGMT@result$Description) > 40)] <- paste0(substr(CCGenesEGMT@result$Description[which(nchar(CCGenesEGMT@result$Description) > 40)], 1, 40), "...")
dp <- enrichplot::dotplot(CCGenesEGMT)
dp <- dp + ggplot2::labs(title = "Co-Correlated Genes Pathway Enrichment")
resList[["coCorrelativeGenes_pathways_dotplot"]] <- dp
if (! returnDataOnly) {
write.csv(eres,
file = file.path(outputPrefix, "coCorrelativeGenes.Pathway.Analysis.csv"),
row.names = F)
ggplot2::ggsave(plot = dp,
filename = file.path(outputPrefix, "coCorrelativeGenes.Pathway.Analysis.png"),
height = 7, width = 10)
png(filename = file.path(outputPrefix, "coCorrelativeGeneHeatmap.png"),
height = height, width = width, units = "in", res = 300)
print(cocorheatmap)
dev.off()
}
}
# Principle component analysis without colors
pca <- prcomp(resultsMat)
dd <- data.frame(summary(pca)$importance)
percentVar <- as.numeric(round(100 * dd[2,]))
percentVar <- percentVar[1:2]
pcaData <- as.data.frame(pca$rotation)
pcaData <- pcaData[,c(1:2)]
pcaData$Gene <- rownames(pcaData)
lenPCA <- 5 + (length(genesOfInterest) - 5)/10
pointSize <- 2
if (lenPCA > 12) {
lenPCA <- 12
cexPCA <- 9/(3 + (.01 * length(genesOfInterest)))
pointSize <- 1
if (cexPCA < 1.4) {
cexPCA <- 1.4
}
}
if (lenPCA > 12) {
lenPCA <- 12
cexPCA <- 9/(3 + (.01 * length(genesOfInterest)))
pointSize <- 1
if (cexPCA < 1.4) {
cexPCA <- 1.4
}
} else {
cexPCA <- 2
}
plt1 <- ggplot2::ggplot(pcaData, ggplot2::aes(PC1, PC2)) +
ggplot2::geom_point(size = pointSize, color = "red") +
ggrepel::geom_text_repel(ggplot2::aes(label=Gene),
size = cexPCA, color = "black",
min.segment.length = 0.01, segment.alpha = 1,
box.padding = 0) +
ggplot2::xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ggplot2::ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggplot2::labs(title = "PCA of Gene Correlation Values") + ggplot2::theme_classic()
plt1
cexPCA <- 3
if (lenPCA > 12) {
lenPCA <- 12
cexPCA <- 9/(3 + (.01 * length(genesOfInterest)))
pointSize <- 1
if (cexPCA < 1.4) {
cexPCA <- 1.4
}
} else {
cexPCA <- 3
}
plt1 <- ggplot2::ggplot(pcaData, ggplot2::aes(PC1, PC2)) +
ggplot2::geom_point(size = pointSize, color = "red") +
ggrepel::geom_text_repel(ggplot2::aes(label=Gene),
size = cexPCA, color = "black",
min.segment.length = 0.01, segment.alpha = 1,
box.padding = 0) +
ggplot2::xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ggplot2::ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggplot2::labs(title = "PCA of Gene Correlation Values") + ggplot2::theme_classic()
plt1
if (lenPCA > 12) {
lenPCA <- 12
cexPCA <- 9/(3 + (.01 * length(genesOfInterest)))
pointSize <- 1
if (cexPCA < 1.4) {
cexPCA <- 1.4
}
} else {
cexPCA <- 3
pointsize <- 3
}
plt1 <- ggplot2::ggplot(pcaData, ggplot2::aes(PC1, PC2)) +
ggplot2::geom_point(size = pointSize, color = "red") +
ggrepel::geom_text_repel(ggplot2::aes(label=Gene),
size = cexPCA, color = "black",
min.segment.length = 0.01, segment.alpha = 1,
box.padding = 0) +
ggplot2::xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ggplot2::ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggplot2::labs(title = "PCA of Gene Correlation Values") + ggplot2::theme_classic()
plt1
if (lenPCA > 12) {
lenPCA <- 12
cexPCA <- 9/(3 + (.01 * length(genesOfInterest)))
pointSize <- 1
if (cexPCA < 1.4) {
cexPCA <- 1.4
}
} else {
cexPCA <- 3
pointsize <- 4
}
plt1 <- ggplot2::ggplot(pcaData, ggplot2::aes(PC1, PC2)) +
ggplot2::geom_point(size = pointSize, color = "red") +
ggrepel::geom_text_repel(ggplot2::aes(label=Gene),
size = cexPCA, color = "black",
min.segment.length = 0.01, segment.alpha = 1,
box.padding = 0) +
ggplot2::xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ggplot2::ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggplot2::labs(title = "PCA of Gene Correlation Values") + ggplot2::theme_classic()
plt1
cexPCA <- 3
pointsize <- 4
plt1 <- ggplot2::ggplot(pcaData, ggplot2::aes(PC1, PC2)) +
ggplot2::geom_point(size = pointSize, color = "red") +
ggrepel::geom_text_repel(ggplot2::aes(label=Gene),
size = cexPCA, color = "black",
min.segment.length = 0.01, segment.alpha = 1,
box.padding = 0) +
ggplot2::xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ggplot2::ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggplot2::labs(title = "PCA of Gene Correlation Values") + ggplot2::theme_classic()
plt1
lenPCA
plt1 <- ggplot2::ggplot(pcaData, ggplot2::aes(PC1, PC2)) +
ggplot2::geom_point(size = pointSize, color = "red") +
ggrepel::geom_text_repel(ggplot2::aes(label=Gene),
size = cexPCA, color = "black",
min.segment.length = 0.02, segment.alpha = 1,
box.padding = 0) +
ggplot2::xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ggplot2::ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggplot2::labs(title = "PCA of Gene Correlation Values") + ggplot2::theme_classic()
plt1
plt1 <- ggplot2::ggplot(pcaData, ggplot2::aes(PC1, PC2)) +
ggplot2::geom_point(size = pointSize, color = "red") +
ggrepel::geom_text_repel(ggplot2::aes(label=Gene),
size = cexPCA, color = "black",
min.segment.length = 0.22, segment.alpha = 1,
box.padding = 0) +
ggplot2::xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ggplot2::ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggplot2::labs(title = "PCA of Gene Correlation Values") + ggplot2::theme_classic()
plt1
plt1 <- ggplot2::ggplot(pcaData, ggplot2::aes(PC1, PC2)) +
ggplot2::geom_point(size = pointSize, color = "red") +
ggrepel::geom_text_repel(ggplot2::aes(label=Gene),
size = cexPCA, color = "black",
min.segment.length = 0.22, segment.alpha = 1,
box.padding = 0) +
ggplot2::xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ggplot2::ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggplot2::labs(title = "PCA of Gene Correlation Values") + ggplot2::theme_classic()
plt1
plt1 <- ggplot2::ggplot(pcaData, ggplot2::aes(PC1, PC2)) +
ggplot2::geom_point(size = pointSize, color = "red") +
ggrepel::geom_text_repel(ggplot2::aes(label=Gene),
size = cexPCA, color = "black",
min.segment.length = 0.02, segment.alpha = 1,
box.padding = 0.1) +
ggplot2::xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ggplot2::ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggplot2::labs(title = "PCA of Gene Correlation Values") + ggplot2::theme_classic()
plt1
resList[["PCA_plot"]] <- plt1
resList[["PCA_data"]] <- pcaData
if (! returnDataOnly) {
ggplot2::ggsave(plt1, file = file.path(outputPrefix, "geneCorrelationData.PCA.png"),
height = 6, width = 7)
}
"PCA" %in% crossComparisonType & (length(genesOfInterest) <= 100 || ! alternativeTSNE
)
alternativeTSNE
alternativeTSNE <- T
"PCA" %in% crossComparisonType & (length(genesOfInterest) <= 100 || ! alternativeTSNE)
"PCA" %in% crossComparisonType & (length(genesOfInterest) <= 100 || alternativeTSNE)
"PCA" %in% crossComparisonType & (length(genesOfInterest) <= 10 || alternativeTSNE)
"PCA" %in% crossComparisonType & (length(genesOfInterest) <= 10 || ! alternativeTSNE)
length(genesOfInterest) <= 10
genesOfInterest <- "PUJANA_BRCA1_PCC_NETWORK"
outputPrefix = "tests/topologyOutput1"
setComparisonCutoff = "Auto"
numTopGenesToPlot = "Auto"
Species = "hsapiens"
Sample_Type <- "Normal_Tissues"
alternativeTSNE <- T
numClusters = "Auto"
returnDataOnly <- F
crossComparisonType = c("variantGenes",
"coCorrelativeGenes",
"hierarchicalClustering",
"PCA")
setComparisonCutoff = "Auto"
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Initialize results object
resList <- list()
# Get available gene names
avGenes <- getAvailableGenes(Species)
# Check genes to make sure they exist -- only a warning
intGenes <- genesOfInterest
badGenes <- intGenes[which(! intGenes %in% avGenes$geneName &
! intGenes %in% MSIGDB_Geneset_Names)]
if (length(badGenes) > 0) {
warning(paste0("\n\t\t\t'", paste(badGenes, collapse = ", "), "'
not found in correlation data and is not an official MSIGDB name.
Please check available gene data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier. Find offical MSIGDB
names by examining the MSIGDB_Geneset_Names object.\n
Continuing without this/these gene(s)..."))
}
# Make list of terms inputted by the user
termlist <- intGenes[which(! intGenes %in% avGenes$geneName &
intGenes %in% MSIGDB_Geneset_Names)]
if (length(termlist > 0)) {
if (Species[1] == "hsapiens") {
TERM2GENE <- hsapiens_complex_TERM2GENE
} else {
TERM2GENE <- mmusculus_complex_TERM2GENE
}
for(i in 1:length(termlist)) {
term <- termlist[i]
print(term)
nameStr <- names(term)
termGenes <- TERM2GENE$human_gene_symbol[which(TERM2GENE$gs_name == term)]
termGenes <- termGenes[which(termGenes %in% avGenes$geneName)] # Ensure actionable genes
intGenes <- unique(c(intGenes, termGenes)) # Append to intgenes vector
}
intGenes <- intGenes[which(! intGenes %in% termlist)]
}
cat("\nRetrieving any missing correlation data...\n")
# Call downloadData to get all required files
downloadData(Species = Species[1],
Sample_Type = Sample_Type[1],
geneList = intGenes)
downloadFolder <- system.file("data", package = "correlationAnalyzeR")
downloadFolder <- file.path(downloadFolder, "Correlation_Data",
Species[1], Sample_Type[1])
corrDF <- analyzeSingleGenes(genesOfInterest = intGenes, Species = Species,
Sample_Type = Sample_Type, returnDataOnly = T)
resList[["Correlation_Data"]] <- corrDF
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306, dbname="bishoplabdb",
password='public-user-password', host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
DBI::dbListTables(con)
sql <- "SELECT * FROM hsapiens_normal_tissues_correlations WHERE geneName_1='AAAS'"
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res)
View(resdf)
DBI::dbClearResult(res)
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
?DBI
?dbSendQuery
?dbFetch
resdf <- DBI::dbFetch(res, n=-1)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbListTables(con)
sql <- "SELECT * FROM hsapiens_normal_tissues_corr WHERE ROWNUM=1"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
sql <- "SELECT * FROM hsapiens_normal_tissues_corr WHERE ROWNUM = 1"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
sql <- "SELECT * FROM hsapiens_normal_tissues_corr WHERE Row_Name = 'A1BG'"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
sql <- "SELECT * FROM hsapiens_normal_tissues_corr WHERE Row_Names = 'A1BG'"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
View(resdf)
DBI::dbClearResult(res)
resstr <- resdf$values
resstr <- strsplit(resstr, split = ",")
resstr <- unlist(resstr, use.names = F)
resstr
tail(resstr)
sql <- "SELECT * FROM hsapiens_normal_tissues_corr"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resstr <- resdf$values
resstr <- strsplit(resstr, split = ",")
resstr <- unlist(resstr, use.names = F)
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306, dbname="bishoplabdb",
password='public-user-password', host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
DBI::dbListTables(con)
sql <- "SELECT * FROM hsapiens_normal_tissues_corrsmall"
sql <- "SELECT * FROM hsapiens_normal_tissues_corrsmall FETCH first row only"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
sql <- "SELECT * FROM hsapiens_normal_tissues_corrsmall LIMIT 1"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resstr <- resdf$values
resstr <- strsplit(resstr, split = ",")
resstr <- unlist(resstr, use.names = F)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resstr <- resdf$values
resstr <- strsplit(resstr, split = ",")
resstr <- unlist(resstr, use.names = F)
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306, dbname="bishoplabdb",
password='public-user-password', host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
DBI::dbListTables(con)
sql <- "SELECT * FROM hsapiens_normal_tissues_corrsmall LIMIT 1"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resstr <- resdf$values
resstr <- strsplit(resstr, split = ",")
resstr <- unlist(resstr, use.names = F)
View(resdf)
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306, dbname="bishoplabdb",
password='public-user-password', host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
DBI::dbListTables(con)
sql <- "SELECT * FROM hsapiens_normal_tissues_corrsmall LIMIT 1"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resstr <- resdf$values
resstr <- strsplit(resstr, split = ",")
resstr <- unlist(resstr, use.names = F)
resdf[1,1]
sql <- "SELECT * FROM hsapiens_normal_tissues_corrsmall WHERE row_names IN ('BRCA1','EZH2')"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
View(resdf)
DBI::dbClearResult(res)
resstr <- resdf$values
resstr <- strsplit(resstr, split = ",")
resstr <- unlist(resstr, use.names = F)
sql <- "SELECT * FROM hsapiens_normal_tissues_corrsmall WHERE row_names IN ('BRCA1','EZH2', 'PARP1')"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resstr <- resdf$values
resstr <- strsplit(resstr, split = ",")
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306, dbname="bishoplabdb",
password='public-user-password', host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
DBI::dbListTables(con)
sql <- "SELECT * FROM hsapiens_normal_tissues_corrsmall WHERE row_names IN ('A1BG','AAAS')"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resstr <- resdf$values
resstr <- strsplit(resstr, split = ",")
resstr <- unlist(resstr, use.names = F)
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306, dbname="bishoplabdb",
password='public-user-password', host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
DBI::dbListTables(con)
sql <- "SELECT * FROM hsapiens_normal_tissues_corrsmall WHERE row_names IN ('A1BG','AAAS')"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resstr <- resdf$values
resstr <- strsplit(resstr, split = ",")
resstr <- unlist(resstr, use.names = F)
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306, dbname="bishoplabdb",
password='public-user-password', host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
DBI::dbListTables(con)
sql <- "SELECT * FROM hsapiens_normal_tissues_corrsmall WHERE row_names IN ('A1BG','AAAS')"
# DBI::dbReadTable(con, "hsapiens_normal_tissues_correlations")
library(DBI)
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resstr <- resdf$values
resstr <- strsplit(resstr, split = ",")
resstr <- unlist(resstr, use.names = F)
DBI::dbDisconnect(conn = con)
DBI::dbDisconnect(conn = con)
