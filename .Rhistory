}
warning(paste0("Failed to establish connection to database ... retrying now ... ",
(4-retryCounter), " attempts left."),
immediate. = T)
pool <- NULL
retryCounter <- retryCounter + 1
}
}
on.exit(function() {
pool::poolClose(pool)
})
}
}
resdf <- try(silent = T, eval({
pool::dbGetQuery(pool, sql)
}))
if ("try-error" %in% class(resdf)) {
stop("Unable to connect to the database at the moment. If you",
" believe this is an error, please contact the package maintainer.")
}
resdf2 <- stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)
resdf2 <- apply(t(resdf2), 1:2, as.numeric)
resdf2 <- as.data.frame(resdf2)
colnames(resdf2) <- resdf$row_names
rownames(resdf2) <- geneNames
if (length(geneList) > 1) {
resdf2 <- resdf2[,order(match(colnames(resdf2), geneList))]
}
} else {
resDfList <- list()
for ( i in 1:length(geneList) ) {
geneName <- geneList[i]
TissueNow <- Tissue[i]
if (TissueNow == "respiratory") {
TissueNow2 <- "repiratory"
} else {
TissueNow2 <- TissueNow
}
Sample_TypeNow <- Sample_Type[i]
sql <- paste0("SELECT * FROM correlations_",
Species, "_",
tolower(Sample_TypeNow), "_", tolower(TissueNow2),
" WHERE row_names IN ('",
geneName, "')")
resdf <- pool::dbGetQuery(pool, sql)
resdf <- try(silent = T, eval({
pool::dbGetQuery(pool, sql)
}))
if ("try-error" %in% class(resdf)) {
pool::poolClose(pool)
pool <- NULL
if (is.null(pool)) {
retryCounter <- 1
cat("\nEstablishing connection to database ... \n")
while(is.null(pool)) {
pool <- try(silent = T, eval({
pool::dbPool(
drv = RMySQL::MySQL(),
user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com"
)
}))
if ("try-error" %in% class(pool)) {
if (retryCounter == 3) {
stop("Unable to connect to database. Check internet connection and please contanct",
" package maintainer if you believe this is an error.")
}
warning(paste0("Failed to establish connection to database ... retrying now ... ",
(4-retryCounter), " attempts left."),
immediate. = T)
pool <- NULL
retryCounter <- retryCounter + 1
}
}
on.exit(function() {
pool::poolClose(pool)
})
}
}
resdf <- try(silent = T, eval({
pool::dbGetQuery(pool, sql)
}))
if ("try-error" %in% class(resdf)) {
stop("Unable to connect to the database at the moment. If you",
" believe this is an error, please contact the package maintainer.")
}
resdf2 <- stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)
resdf2 <- apply(t(resdf2), 1:2, as.numeric)
resdf2 <- as.data.frame(resdf2)
colnames(resdf2) <- resdf$row_names
rownames(resdf2) <- geneNames
resDfList[[i]] <- resdf2
}
resdf2 <- dplyr::bind_cols(resDfList)
rownames(resdf2) <- geneNames
}
View(resdf2)
length(unique(Tissue)) == 1 & length(unique(Sample_Type)) == 1
resDfList <- list()
pool
Sample_Type
# Bug testing
genesOfInterest <- c("NONO")
Species = c("hsapiens", "mmusculus")
GSEA_Type = c("simple", "complex")
Sample_Type = "normal"
Tissue = "all"
crossCompareMode = TRUE
whichCompareGroups = c("all", "normal", "cancer")
outputPrefix = "CorrelationAnalyzeR_Output"
runGSEA = TRUE
topPlots = FALSE
sampler = FALSE
returnDataOnly = TRUE
pool = NULL
if (is.null(pool)) {
retryCounter <- 1
cat("\nEstablishing connection to database ... \n")
while(is.null(pool)) {
pool <- try(silent = T, eval({
pool::dbPool(
drv = RMySQL::MySQL(),
user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com"
)
}))
if ("try-error" %in% class(pool)) {
if (retryCounter == 3) {
stop("Unable to connect to database. Check internet connection and please contanct",
" package maintainer if you believe this is an error.")
}
warning(paste0("Failed to establish connection to database ... retrying now ... ",
(4-retryCounter), " attempts left."),
immediate. = T)
pool <- NULL
retryCounter <- retryCounter + 1
}
}
on.exit(function() {
pool::poolClose(pool)
})
}
# Parse arguments
geneString <- paste(genesOfInterest, collapse = ", ")
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Load appropriate TERM2GENE file built from msigdbr()
if (Species[1] %in% c("hsapiens", "mmusculus")) {
if (runGSEA) {
TERM2GENE <- correlationAnalyzeR::getTERM2GENE(GSEA_Type = GSEA_Type,
sampler = sampler,
Species = Species)
}
} else {
stop("\ncorrelationAnalyzeR currently supports only Human and Mouse data.
Please select either 'hsapiens' or 'mmusculus' for Species parameter.
\n")
}
# Check genes to make sure they exist
avGenes <- correlationAnalyzeR::getAvailableGenes(Species = Species, pool = pool)
badGenes <- genesOfInterest[which(! genesOfInterest %in% avGenes)]
if (length(badGenes) > 0) {
stop(paste0("\n\t\t\t'", paste(badGenes, collapse = ", "), "' not found
in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
cat("\nRetrieving any missing correlation data...\n")
if (length(Tissue) == 1) {
Tissue <- rep(Tissue, length(genesOfInterest))
} else if (length(Tissue) > 1) {
if (length(Tissue) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Tissue vector.
Tissue vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (length(Sample_Type) == 1) {
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
} else if (length(Sample_Type) > 1) {
if (length(Sample_Type) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Sample_Type vector.
Sample_Type vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (crossCompareMode) {
cat("\nRunning cross comparison mode ... \n")
if (Species == "mmusculus") {
whichCompareGroups <- "normal"
cat("\nOnly normal tissue comparisons available for mouse",
" due to black-listing of cancer groups.\n")
cat("\nContinuing with normal tissues ... \n")
}
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
pool = pool,
useBlackList = TRUE)
runGSEA <- F
if(whichCompareGroups != "all") {
availTissue <- availTissue[grep(availTissue,
pattern = whichCompareGroups)]
}
availTissue <- strsplit(availTissue, split = " - ")
Tissue <- vapply(availTissue, FUN = "[[", FUN.VALUE = "character", 1)
genesVec <- rep(genesOfInterest, each = length(Tissue))
Tissue <- rep(Tissue, length(genesOfInterest))
Sample_Type <- vapply(availTissue, FUN = "[[", FUN.VALUE = "character", 2)
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
genesOfInterest <- genesVec
}
geneList <- genesOfInterest
if (! is.null(pool)) {
if (! pool$valid) {
pool <- NULL
}
}
if (is.null(pool)) {
retryCounter <- 1
cat("\nEstablishing connection to database ... \n")
while(is.null(pool)) {
pool <- try(silent = T, eval({
pool::dbPool(
drv = RMySQL::MySQL(),
user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com"
)
}))
if ("try-error" %in% class(pool)) {
if (retryCounter == 3) {
stop("Unable to connect to database. Check internet connection and please contanct",
" package maintainer if you believe this is an error.")
}
warning(paste0("Failed to establish connection to database ... retrying now ... ",
(4-retryCounter), " attempts left."),
immediate. = T)
pool <- NULL
retryCounter <- retryCounter + 1
}
}
on.exit(function() {
pool::poolClose(pool)
})
}
if (Species == "hsapiens") {
geneNames <- correlationAnalyzeR::hsapiens_corrSmall_geneNames
} else {
geneNames <- correlationAnalyzeR::mmusculus_corrSmall_geneNames
}
# Queries from multiple db at once
if (length(Tissue) == 1) {
Tissue <- rep(Tissue, length(geneList))
} else if (length(Tissue) > 1) {
if (length(Tissue) != length(geneList)) {
warning("Number of valid genes not equal
to length of supplied Tissue vector. Using only ", Tissue[1])
Tissue <- rep(Tissue[1], length(geneList))
}
}
if (length(Sample_Type) == 1) {
Sample_Type <- rep(Sample_Type, length(geneList))
} else if (length(Sample_Type) > 1) {
if (length(Sample_Type) != length(geneList)) {
warning("Number of valid genes not equal
to length of supplied Sample_Type vector. Using only ", Sample_Type[1])
Sample_Type <- rep(Sample_Type[1], length(geneList))
}
}
Tissue
Sample_Type
geneList
if (length(unique(Tissue)) == 1 & length(unique(Sample_Type)) == 1) {
if (Tissue == "respiratory") {
TissueNow <- "repiratory"
} else {
TissueNow <- Tissue
}
sql <- paste0("SELECT * FROM correlations_",
Species, "_",
tolower(unique(Sample_Type)), "_",
tolower(unique(TissueNow)),
" WHERE row_names IN ('",
paste(geneList, collapse = "','"), "')")
resdf <- try(silent = T, eval({
pool::dbGetQuery(pool, sql)
}))
if ("try-error" %in% class(resdf)) {
pool::poolClose(pool)
pool <- NULL
if (is.null(pool)) {
retryCounter <- 1
cat("\nEstablishing connection to database ... \n")
while(is.null(pool)) {
pool <- try(silent = T, eval({
pool::dbPool(
drv = RMySQL::MySQL(),
user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com"
)
}))
if ("try-error" %in% class(pool)) {
if (retryCounter == 3) {
stop("Unable to connect to database. Check internet connection and please contanct",
" package maintainer if you believe this is an error.")
}
warning(paste0("Failed to establish connection to database ... retrying now ... ",
(4-retryCounter), " attempts left."),
immediate. = T)
pool <- NULL
retryCounter <- retryCounter + 1
}
}
on.exit(function() {
pool::poolClose(pool)
})
}
}
resdf <- try(silent = T, eval({
pool::dbGetQuery(pool, sql)
}))
if ("try-error" %in% class(resdf)) {
stop("Unable to connect to the database at the moment. If you",
" believe this is an error, please contact the package maintainer.")
}
resdf2 <- stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)
resdf2 <- apply(t(resdf2), 1:2, as.numeric)
resdf2 <- as.data.frame(resdf2)
colnames(resdf2) <- resdf$row_names
rownames(resdf2) <- geneNames
if (length(geneList) > 1) {
resdf2 <- resdf2[,order(match(colnames(resdf2), geneList))]
}
} else {
resDfList <- list()
for ( i in 1:length(geneList) ) {
geneName <- geneList[i]
TissueNow <- Tissue[i]
if (TissueNow == "respiratory") {
TissueNow2 <- "repiratory"
} else {
TissueNow2 <- TissueNow
}
Sample_TypeNow <- Sample_Type[i]
sql <- paste0("SELECT * FROM correlations_",
Species, "_",
tolower(Sample_TypeNow), "_", tolower(TissueNow2),
" WHERE row_names IN ('",
geneName, "')")
resdf <- pool::dbGetQuery(pool, sql)
resdf <- try(silent = T, eval({
pool::dbGetQuery(pool, sql)
}))
if ("try-error" %in% class(resdf)) {
pool::poolClose(pool)
pool <- NULL
if (is.null(pool)) {
retryCounter <- 1
cat("\nEstablishing connection to database ... \n")
while(is.null(pool)) {
pool <- try(silent = T, eval({
pool::dbPool(
drv = RMySQL::MySQL(),
user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com"
)
}))
if ("try-error" %in% class(pool)) {
if (retryCounter == 3) {
stop("Unable to connect to database. Check internet connection and please contanct",
" package maintainer if you believe this is an error.")
}
warning(paste0("Failed to establish connection to database ... retrying now ... ",
(4-retryCounter), " attempts left."),
immediate. = T)
pool <- NULL
retryCounter <- retryCounter + 1
}
}
on.exit(function() {
pool::poolClose(pool)
})
}
}
resdf <- try(silent = T, eval({
pool::dbGetQuery(pool, sql)
}))
if ("try-error" %in% class(resdf)) {
stop("Unable to connect to the database at the moment. If you",
" believe this is an error, please contact the package maintainer.")
}
resdf2 <- stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)
resdf2 <- apply(t(resdf2), 1:2, as.numeric)
resdf2 <- as.data.frame(resdf2)
colnames(resdf2) <- resdf$row_names
rownames(resdf2) <- geneNames
resDfList[[i]] <- resdf2
}
resdf2 <- dplyr::bind_cols(resDfList)
rownames(resdf2) <- geneNames
}
View(resdf2)
# Call downloadData to get all required files
corrDF <- correlationAnalyzeR::getCorrelationData(Species = Species,
Tissue = Tissue, pool = pool,
Sample_Type = Sample_Type,
geneList = genesOfInterest)
View(corrDF)
View(resdf2)
avGenes
rownames(corrDF) <- geneNames
View(corrDF)
tissue2 <- gsub(Tissue, pattern = "0", replacement = " ")
tissue2 <- stringr::str_to_title(tissue2)
if(whichCompareGroups != "all") {
namesVec <- tissue2
} else {
namesVec <- paste0(tissue2, " - ", stringr::str_to_title(Sample_Type))
}
topName <- paste0(genesOfInterest, "_", Tissue, "_", Sample_Type)
resList <- list()
geneList <- unique(genesOfInterest)
for (i in 1:length(geneList)) {
geneNow <- geneList[i]
resList[[i]] <- list()
names(resList)[i] <- geneNow
inds <- which(genesOfInterest == geneNow)
newDF <- corrDF[,inds]
topNameNow <- topName[inds]
colnames(newDF) <- topNameNow
namesVecNow <- namesVec[inds]
resList[[i]][["correlations"]] <- newDF
newDFNorm <- preprocessCore::normalize.quantiles(as.matrix(newDF))
newDFNorm <- as.data.frame(newDFNorm)
rownames(newDFNorm) <- rownames(newDF)
colnames(newDFNorm) <- colnames(newDF)
newDFNorm$Variance <- matrixStats::rowVars(as.matrix(newDFNorm))
newDFNorm <- newDFNorm[order(newDFNorm$Variance, decreasing = TRUE),]
n <- length(colnames(newDFNorm))
pMat <- newDFNorm[c(1:30),c(-n)]
pMatBig <- newDFNorm[c(1:500),c(-n)]
titleName <- ifelse(whichCompareGroups == "all", paste0(geneNow,
" correlations across conditions"),
no = ifelse(whichCompareGroups == "normal",
paste0(geneNow,
" correlations across tissue types"),
no = paste0(geneNow,
" correlations across tumor tissues")))
phSmall <- pheatmap::pheatmap(pMat, silent = TRUE,
angle_col = 45, #main = titleName,
labels_col = namesVecNow)
phBig <- pheatmap::pheatmap(pMatBig, silent = TRUE, angle_col = 45,
show_rownames = FALSE, #main = titleName,
labels_col = namesVecNow)
# Get TPM for gene
geneTPMList <- correlationAnalyzeR::getTissueTPM(genesOfInterest = geneNow,
Species = Species,
Tissues = "all", pool = pool,
Sample_Type = whichCompareGroups[1],
useBlackList = TRUE)
# Make TPM plot
geneTPMDF <- data.table::rbindlist(geneTPMList, idcol = "group")
colnames(geneTPMDF)[3] <- "value"
geneTPMDF$value <- log2(geneTPMDF$value + 1)
rawGroup <- geneTPMDF$group
rawGroup1 <- gsub(rawGroup, pattern = "_.*", replacement = "")
rawGroup2 <- gsub(rawGroup, pattern = ".*_", replacement = "")
rawGroup2 <- gsub(rawGroup2, pattern = "0", replacement = " ")
geneTPMDF$group <- paste0(rawGroup2, " - ", rawGroup1)
geneTPMDF$group <- stringr::str_to_title(geneTPMDF$group)
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
pool = pool,
useBlackList = TRUE)
availTissue <- gsub(availTissue, pattern = "0", replacement = " ")
availTissue <- stringr::str_to_title(availTissue)
# all(geneTPMDF$group %in% availTissue) -- should be TRUE
geneTPMDF <- geneTPMDF[order(match(geneTPMDF$group, availTissue)),]
TPMBP <- ggpubr::ggboxplot(data = geneTPMDF,
x = "group",
title = paste0(geneNow, " expression across groups"),
ylab = "log2(TPM + 1)",
fill = "group",
y = "value") +
ggpubr::rotate_x_text(angle = 45) +
ggpubr::rremove("legend") +
ggpubr::rremove("xlab")
colnames(geneTPMDF)[3] <- paste0(geneNow, "_log2TPM")
resList[[i]][["TPM_DF"]] <- geneTPMDF
resList[[i]][["TPM_boxPlot"]] <- TPMBP
resList[[i]][["heatmapSmall"]] <- phSmall
resList[[i]][["heatmapSmallData"]] <- pMat
resList[[i]][["heatmapBig"]] <- phBig
resList[[i]][["heatmapBigData"]] <- pMatBig
}
topNameNow
View(resList)
resList[["NONO"]][["correlations"]]
resList[["NONO"]][["heatmapSmall"]]
library(correlationAnalyzeR)
