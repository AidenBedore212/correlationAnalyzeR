Sample_Type <- rep(Sample_Type, length(genesOfInterest))
genesOfInterest <- genesVec
}
# Call downloadData to get all required files
corrDF <- correlationAnalyzeR::getCorrelationData(Species = Species,
Tissue = Tissue,
Sample_Type = Sample_Type,
geneList = genesOfInterest)
tissue2 <- gsub(Tissue, pattern = "0", replacement = " ")
tissue2 <- stringr::str_to_title(tissue2)
if(whichCompareGroups != "all") {
namesVec <- tissue2
} else {
namesVec <- paste0(tissue2, " - ", stringr::str_to_title(Sample_Type))
}
topName <- paste0(genesOfInterest, "_", Tissue, "_", Sample_Type)
resList <- list()
geneList <- unique(genesOfInterest)
i <- 1
geneNow <- geneList[i]
resList[[i]] <- list()
names(resList)[i] <- geneNow
inds <- which(genesOfInterest == geneNow)
newDF <- corrDF[,inds]
topNameNow <- topName[inds]
colnames(newDF) <- topNameNow
namesVecNow <- namesVec[inds]
resList[[i]][["correlations"]] <- newDF
newDFNorm <- preprocessCore::normalize.quantiles(as.matrix(newDF))
newDFNorm <- as.data.frame(newDFNorm)
rownames(newDFNorm) <- rownames(newDF)
colnames(newDFNorm) <- colnames(newDF)
newDFNorm$Variance <- matrixStats::rowVars(as.matrix(newDFNorm))
newDFNorm <- newDFNorm[order(newDFNorm$Variance, decreasing = TRUE),]
n <- length(colnames(newDFNorm))
pMat <- newDFNorm[c(1:30),c(-n)]
pMatBig <- newDFNorm[c(1:500),c(-n)]
titleName <- ifelse(whichCompareGroups == "all", paste0(geneNow,
" correlations across conditions"),
no = ifelse(whichCompareGroups == "normal",
paste0(geneNow,
" correlations across tissue types"),
no = paste0(geneNow,
" correlations across tumor tissues")))
phSmall <- pheatmap::pheatmap(pMat, silent = TRUE,
angle_col = 45, #main = titleName,
labels_col = namesVecNow)
phBig <- pheatmap::pheatmap(pMatBig, silent = TRUE, angle_col = 45,
show_rownames = FALSE, #main = titleName,
labels_col = namesVecNow)
# Get TPM for gene
geneTPMList <- correlationAnalyzeR::getTissueTPM(genesOfInterest = geneNow,
Species = Species,
Tissues = "all",
Sample_Type = whichCompareGroups[1],
useBlackList = TRUE)
View(geneTPMList)
View(geneTPMList)
# Make TPM plot
geneTPMDF <- data.table::rbindlist(geneTPMList, idcol = "group")
colnames(geneTPMDF)[3] <- "value"
View(geneTPMDF)
colnames(geneTPMDF)[3] <- paste0(geneNow, "_log2TPM")
colnames(geneTPMDF)
# Make TPM plot
geneTPMDF <- data.table::rbindlist(geneTPMList, idcol = "group")
colnames(geneTPMDF)[3] <- "value"
geneTPMDF$value <- log2(geneTPMDF$value + 1)
rawGroup <- geneTPMDF$group
rawGroup1 <- gsub(rawGroup, pattern = "_.*", replacement = "")
rawGroup2 <- gsub(rawGroup, pattern = ".*_", replacement = "")
rawGroup2 <- gsub(rawGroup2, pattern = "0", replacement = " ")
geneTPMDF$group <- paste0(rawGroup2, " - ", rawGroup1)
geneTPMDF$group <- stringr::str_to_title(geneTPMDF$group)
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
useBlackList = TRUE)
availTissue <- gsub(availTissue, pattern = "0", replacement = " ")
availTissue <- stringr::str_to_title(availTissue)
# all(geneTPMDF$group %in% availTissue) -- should be TRUE
geneTPMDF <- geneTPMDF[order(match(geneTPMDF$group, availTissue)),]
TPMBP <- ggpubr::ggboxplot(data = geneTPMDF,
x = "group",
title = paste0(geneNow, " expression across groups"),
ylab = "log2(TPM + 1)",
fill = "group",
y = "value") +
ggpubr::rotate_x_text() +
ggpubr::rremove("legend") +
ggpubr::rremove("xlab")
colnames(geneTPMDF)[3] <- paste0(geneNow, "_log2TPM")
resList[[i]][["TPM_DF"]] <- geneTPMDF
resList[[i]][["TPM_boxPlot"]] <- TPMBP
resList[[i]][["heatmapSmall"]] <- phSmall
resList[[i]][["heatmapSmallData"]] <- pMat
resList[[i]][["heatmapBig"]] <- phBig
resList[[i]][["heatmapBigData"]] <- pMatBig
TPMBP
if(crossCompareMode) {
tissue2 <- gsub(Tissue, pattern = "0", replacement = " ")
tissue2 <- stringr::str_to_title(tissue2)
if(whichCompareGroups != "all") {
namesVec <- tissue2
} else {
namesVec <- paste0(tissue2, " - ", stringr::str_to_title(Sample_Type))
}
topName <- paste0(genesOfInterest, "_", Tissue, "_", Sample_Type)
resList <- list()
geneList <- unique(genesOfInterest)
for (i in 1:length(geneList)) {
geneNow <- geneList[i]
resList[[i]] <- list()
names(resList)[i] <- geneNow
inds <- which(genesOfInterest == geneNow)
newDF <- corrDF[,inds]
topNameNow <- topName[inds]
colnames(newDF) <- topNameNow
namesVecNow <- namesVec[inds]
resList[[i]][["correlations"]] <- newDF
newDFNorm <- preprocessCore::normalize.quantiles(as.matrix(newDF))
newDFNorm <- as.data.frame(newDFNorm)
rownames(newDFNorm) <- rownames(newDF)
colnames(newDFNorm) <- colnames(newDF)
newDFNorm$Variance <- matrixStats::rowVars(as.matrix(newDFNorm))
newDFNorm <- newDFNorm[order(newDFNorm$Variance, decreasing = TRUE),]
n <- length(colnames(newDFNorm))
pMat <- newDFNorm[c(1:30),c(-n)]
pMatBig <- newDFNorm[c(1:500),c(-n)]
titleName <- ifelse(whichCompareGroups == "all", paste0(geneNow,
" correlations across conditions"),
no = ifelse(whichCompareGroups == "normal",
paste0(geneNow,
" correlations across tissue types"),
no = paste0(geneNow,
" correlations across tumor tissues")))
phSmall <- pheatmap::pheatmap(pMat, silent = TRUE,
angle_col = 45, #main = titleName,
labels_col = namesVecNow)
phBig <- pheatmap::pheatmap(pMatBig, silent = TRUE, angle_col = 45,
show_rownames = FALSE, #main = titleName,
labels_col = namesVecNow)
# Get TPM for gene
geneTPMList <- correlationAnalyzeR::getTissueTPM(genesOfInterest = geneNow,
Species = Species,
Tissues = "all",
Sample_Type = whichCompareGroups[1],
useBlackList = TRUE)
# Make TPM plot
geneTPMDF <- data.table::rbindlist(geneTPMList, idcol = "group")
colnames(geneTPMDF)[3] <- "value"
geneTPMDF$value <- log2(geneTPMDF$value + 1)
rawGroup <- geneTPMDF$group
rawGroup1 <- gsub(rawGroup, pattern = "_.*", replacement = "")
rawGroup2 <- gsub(rawGroup, pattern = ".*_", replacement = "")
rawGroup2 <- gsub(rawGroup2, pattern = "0", replacement = " ")
geneTPMDF$group <- paste0(rawGroup2, " - ", rawGroup1)
geneTPMDF$group <- stringr::str_to_title(geneTPMDF$group)
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
useBlackList = TRUE)
availTissue <- gsub(availTissue, pattern = "0", replacement = " ")
availTissue <- stringr::str_to_title(availTissue)
# all(geneTPMDF$group %in% availTissue) -- should be TRUE
geneTPMDF <- geneTPMDF[order(match(geneTPMDF$group, availTissue)),]
TPMBP <- ggpubr::ggboxplot(data = geneTPMDF,
x = "group",
title = paste0(geneNow, " expression across groups"),
ylab = "log2(TPM + 1)",
fill = "group",
y = "value") +
ggpubr::rotate_x_text() +
ggpubr::rremove("legend") +
ggpubr::rremove("xlab")
colnames(geneTPMDF)[3] <- paste0(geneNow, "_log2TPM")
resList[[i]][["TPM_DF"]] <- geneTPMDF
resList[[i]][["TPM_boxPlot"]] <- TPMBP
resList[[i]][["heatmapSmall"]] <- phSmall
resList[[i]][["heatmapSmallData"]] <- pMat
resList[[i]][["heatmapBig"]] <- phBig
resList[[i]][["heatmapBigData"]] <- pMatBig
}
return(resList)
}
View(resList)
resList[["ATM"]][["TPM_boxPlot"]]
resList[["SLC3A2"]][["TPM_boxPlot"]]
# Bug testing
genesOfInterest <- c("FLI1", "EWSR1", "STAG2")
Species = c("hsapiens", "mmusculus")
GSEA_Type = c("simple", "complex")
Sample_Type = "normal"
Tissue = "all"
crossCompareMode = TRUE
whichCompareGroups = c("all", "normal", "cancer")
outputPrefix = "CorrelationAnalyzeR_Output"
runGSEA = FALSE
topPlots = FALSE
returnDataOnly = TRUE
# Parse arguments
geneString <- paste(genesOfInterest, collapse = ", ")
# Create output folder
if (! dir.exists(outputPrefix) & ! returnDataOnly) {
dir.create(outputPrefix)
}
# Load appropriate TERM2GENE file built from msigdbr()
if (Species[1] %in% c("hsapiens", "mmusculus")) {
if (runGSEA) {
if (! GSEA_Type %in% c("simple", "complex")) {
stop("\nPlease enter either 'simple' or 'complex' for GSEA_Type\n")
} else if (GSEA_Type[1] == "simple") {
if (Species[1] == "hsapiens") {
TERM2GENE <- correlationAnalyzeR::hsapiens_simple_TERM2GENE
} else {
TERM2GENE <- correlationAnalyzeR::mmusculus_simple_TERM2GENE
}
} else {
if (Species[1] == "hsapiens") {
TERM2GENE <- correlationAnalyzeR::hsapiens_complex_TERM2GENE
} else {
TERM2GENE <- correlationAnalyzeR::mmusculus_complex_TERM2GENE
}
}
}
} else {
stop("\ncorrelationAnalyzeR currently supports only Human and Mouse data.
Please select either 'hsapiens' or 'mmusculus' for Species parameter.
\n")
}
# Check genes to make sure they exist
avGenes <- correlationAnalyzeR::getAvailableGenes(Species = Species)
avGenes <- as.character(avGenes$geneName)
badGenes <- genesOfInterest[which(! genesOfInterest %in% avGenes)]
if (length(badGenes) > 0) {
stop(paste0("\n\t\t\t'", paste(badGenes, collapse = ", "), "' not found
in correlation data.
Please check available data with getAvailableGenes().
Your gene(s) of interest may have an updated name or
have a species-specific identifier.\n"))
}
cat("\nRetrieving any missing correlation data...\n")
if (length(Tissue) == 1) {
Tissue <- rep(Tissue, length(genesOfInterest))
} else if (length(Tissue) > 1) {
if (length(Tissue) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Tissue vector.
Tissue vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (length(Sample_Type) == 1) {
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
} else if (length(Sample_Type) > 1) {
if (length(Sample_Type) != length(genesOfInterest)) {
stop("Number of valid genes not equal
to length of supplied Sample_Type vector.
Sample_Type vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (crossCompareMode) {
cat("\nRunning cross comparison mode ... \n")
if (Species == "mmusculus") {
whichCompareGroups <- "normal"
cat("\nOnly normal tissue comparisons available for mouse",
" due to black-listing of cancer groups.\n")
cat("\nContinuing with normal tissues ... \n")
}
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
useBlackList = TRUE)
runGSEA <- F
if(whichCompareGroups != "all") {
availTissue <- availTissue[grep(availTissue,
pattern = whichCompareGroups)]
}
availTissue <- strsplit(availTissue, split = " - ")
Tissue <- sapply(availTissue, "[[", 1)
genesVec <- rep(genesOfInterest, each = length(Tissue))
Tissue <- rep(Tissue, length(genesOfInterest))
Sample_Type <- sapply(availTissue, "[[", 2)
Sample_Type <- rep(Sample_Type, length(genesOfInterest))
genesOfInterest <- genesVec
}
# Call downloadData to get all required files
corrDF <- correlationAnalyzeR::getCorrelationData(Species = Species,
Tissue = Tissue,
Sample_Type = Sample_Type,
geneList = genesOfInterest)
if(crossCompareMode) {
tissue2 <- gsub(Tissue, pattern = "0", replacement = " ")
tissue2 <- stringr::str_to_title(tissue2)
if(whichCompareGroups != "all") {
namesVec <- tissue2
} else {
namesVec <- paste0(tissue2, " - ", stringr::str_to_title(Sample_Type))
}
topName <- paste0(genesOfInterest, "_", Tissue, "_", Sample_Type)
resList <- list()
geneList <- unique(genesOfInterest)
for (i in 1:length(geneList)) {
geneNow <- geneList[i]
resList[[i]] <- list()
names(resList)[i] <- geneNow
inds <- which(genesOfInterest == geneNow)
newDF <- corrDF[,inds]
topNameNow <- topName[inds]
colnames(newDF) <- topNameNow
namesVecNow <- namesVec[inds]
resList[[i]][["correlations"]] <- newDF
newDFNorm <- preprocessCore::normalize.quantiles(as.matrix(newDF))
newDFNorm <- as.data.frame(newDFNorm)
rownames(newDFNorm) <- rownames(newDF)
colnames(newDFNorm) <- colnames(newDF)
newDFNorm$Variance <- matrixStats::rowVars(as.matrix(newDFNorm))
newDFNorm <- newDFNorm[order(newDFNorm$Variance, decreasing = TRUE),]
n <- length(colnames(newDFNorm))
pMat <- newDFNorm[c(1:30),c(-n)]
pMatBig <- newDFNorm[c(1:500),c(-n)]
titleName <- ifelse(whichCompareGroups == "all", paste0(geneNow,
" correlations across conditions"),
no = ifelse(whichCompareGroups == "normal",
paste0(geneNow,
" correlations across tissue types"),
no = paste0(geneNow,
" correlations across tumor tissues")))
phSmall <- pheatmap::pheatmap(pMat, silent = TRUE,
angle_col = 45, #main = titleName,
labels_col = namesVecNow)
phBig <- pheatmap::pheatmap(pMatBig, silent = TRUE, angle_col = 45,
show_rownames = FALSE, #main = titleName,
labels_col = namesVecNow)
# Get TPM for gene
geneTPMList <- correlationAnalyzeR::getTissueTPM(genesOfInterest = geneNow,
Species = Species,
Tissues = "all",
Sample_Type = whichCompareGroups[1],
useBlackList = TRUE)
# Make TPM plot
geneTPMDF <- data.table::rbindlist(geneTPMList, idcol = "group")
colnames(geneTPMDF)[3] <- "value"
geneTPMDF$value <- log2(geneTPMDF$value + 1)
rawGroup <- geneTPMDF$group
rawGroup1 <- gsub(rawGroup, pattern = "_.*", replacement = "")
rawGroup2 <- gsub(rawGroup, pattern = ".*_", replacement = "")
rawGroup2 <- gsub(rawGroup2, pattern = "0", replacement = " ")
geneTPMDF$group <- paste0(rawGroup2, " - ", rawGroup1)
geneTPMDF$group <- stringr::str_to_title(geneTPMDF$group)
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
useBlackList = TRUE)
availTissue <- gsub(availTissue, pattern = "0", replacement = " ")
availTissue <- stringr::str_to_title(availTissue)
# all(geneTPMDF$group %in% availTissue) -- should be TRUE
geneTPMDF <- geneTPMDF[order(match(geneTPMDF$group, availTissue)),]
TPMBP <- ggpubr::ggboxplot(data = geneTPMDF,
x = "group",
title = paste0(geneNow, " expression across groups"),
ylab = "log2(TPM + 1)",
fill = "group",
y = "value") +
ggpubr::rotate_x_text() +
ggpubr::rremove("legend") +
ggpubr::rremove("xlab")
colnames(geneTPMDF)[3] <- paste0(geneNow, "_log2TPM")
resList[[i]][["TPM_DF"]] <- geneTPMDF
resList[[i]][["TPM_boxPlot"]] <- TPMBP
resList[[i]][["heatmapSmall"]] <- phSmall
resList[[i]][["heatmapSmallData"]] <- pMat
resList[[i]][["heatmapBig"]] <- phBig
resList[[i]][["heatmapBigData"]] <- pMatBig
}
return(resList)
}
View(resList)
resList[["FLI1"]][["TPM_boxPlot"]]
resList[["EWSR1"]][["TPM_boxPlot"]]
resList[["STAG2"]][["TPM_boxPlot"]]
genesOfInterest <- c("ATM", "SLC3A2")
genesOfInterest <- c("ATM", "SLC3A2")
crossCompareMode = TRUE
returnDataOnly = TRUE
lm_eqn <- function(df){
m <- stats::lm(eval(parse(text = colnames(df)[2])) ~ eval(parse(text = colnames(df)[1])), df)
r <- sqrt(summary(m)$r.squared) * sign(unname(stats::coef(m)[2]))
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(R)~"="~r,
list(a = format(unname(stats::coef(m)[1]), digits = 2),
b = format(unname(stats::coef(m)[2]), digits = 2),
r = format(r, digits = 2)))
as.character(as.expression(eq));
}
# If running in cross-comparison mode...
if (crossCompareMode) {
cat("\nRunning cross comparison mode ... \n")
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
useBlackList = TRUE)
runGSEA <- F
if (genesOfInterest[1] == genesOfInterest[2]) {
cat("\nGene one is the same as gene two ... \n")
if (Species == "mmusculus") {
stop("\nOnly normal tissues available for mouse",
" due to black-listing of cancer groups for low quality.",
"\nEnter two different genes or choose human ... \n")
}
cat("\nWill perform normal vs cancer comparison on",
genesOfInterest[1], "... \n")
mode <- "cross_normalVsCancer"
df <- as.data.frame(table(gsub(availTissue,
pattern = " - .*",
replacement = "")), stringsAsFactors = FALSE)
goodTissues <- df$Var1[which(df$Freq == 2)]
Tissue <- rep(goodTissues, each = 2)
Sample_Type <- rep(c("normal", "cancer"), length(goodTissues))
genesVec <- rep(genesOfInterest[1], length(Sample_Type))
} else {
geneOne <- genesOfInterest[1]
geneTwo <- genesOfInterest[2]
cat("\nGene one is not the same as gene two ... \n")
cat("\nWill perform comparison of",
geneOne, "and",
geneTwo, "across all available tissue-disease conditions... \n")
mode <- "cross_geneVsGene"
availTissue <- strsplit(availTissue, split = " - ")
Tissue <- sapply(availTissue, "[[", 1)
genesVec <- rep(genesOfInterest, length(Tissue))
Tissue <- rep(Tissue, each = 2)
Sample_Type <- sapply(availTissue, "[[", 2)
Sample_Type <- rep(Sample_Type, each = 2)
}
pairRes <- correlationAnalyzeR::analyzeSingleGenes(
genesOfInterest = genesVec,
returnDataOnly = returnDataOnly, topPlots = topPlots,
outputPrefix = outputPrefix, runGSEA = runGSEA,
Sample_Type = Sample_Type, Tissue = Tissue,
Species = Species, GSEA_Type = GSEA_Type
)
n <- length(names(pairRes))
oldNames <- names(pairRes)[1:(n-1)]
newNames <- gsub(oldNames, pattern = ", ", replacement = "_")
newNames <- gsub(newNames, pattern = " - ", replacement = "_")
newNames <- gsub(newNames, pattern = " ", replacement = "0")
correlations <- pairRes$correlations
colnames(correlations) <- newNames
resList <- list()
resList[["pairResList"]] <- list()
for (i in 1:length(colnames(correlations))) {
samp <- colnames(correlations)[i]
if (i %% 2 == 0) {
dfRaw <- correlations[,c((i-1), i)]
df <- dfRaw
tempList <- list()
tissue <- stringr::str_match(colnames(df)[1], pattern = "_(.*)")[,2]
tissue <- gsub(tissue, pattern = "_", replacement = " - ")
tissue <- gsub(tissue, pattern = "0", replacement = " ")
tissueSmall <- gsub(tissue, pattern = " - .*", replacement = "")
df$Gene <- F
df$Gene[which(rownames(df) %in% unique(genesVec))] <- T
titleStr <- ifelse(genesOfInterest[1] == genesOfInterest[2], yes = tissueSmall,
no = tissue)
labb <- lm_eqn(df)
# xtex <- eval(parse(text = colnames(df)[1]))
# ytex <- eval(parse(text = colnames(df)[2]))
gp <- ggplot2::ggplot(data = df,
mapping = ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[2])) +
ggplot2::stat_bin2d(bins = 150) +
ggplot2::geom_smooth(colour="black", size = 1.25,
method='lm') +
ggplot2::labs(title = titleStr) +
ggplot2::ylab(oldNames[(i-1)]) +
ggplot2::xlab(oldNames[i]) +
ggplot2::annotate("text", x = 0, y = 1.1,
label = labb,
parse = TRUE) +
ggpubr::theme_pubr() +
ggplot2::theme(legend.position = "none")
tempList[["scatterPlot"]] <- gp
dfRaw$Variance <- matrixStats::rowVars(as.matrix(dfRaw))
tempList[["correlations"]] <- dfRaw
dfRaw <- dfRaw[which(! rownames(dfRaw) %in% genesOfInterest),]
dfRawUp <- dfRaw[dfRaw[,1] > 0,]
dfRawUp <- dfRawUp[order(dfRawUp$Variance, decreasing = TRUE),]
dfRawUpSmall <- dfRawUp[c(1:15),]
dfRawDn <- dfRaw[dfRaw[,1] < 0,]
dfRawDn <- dfRawDn[order(dfRawDn$Variance, decreasing = TRUE),]
dfRawDnSmall <- dfRawDn[c(1:15),]
dfPh <- rbind(dfRawUpSmall, dfRawDnSmall)
dfPh <- dfPh[,c(-3)]
ph <- pheatmap::pheatmap(dfPh, cluster_cols = FALSE,
silent = TRUE, angle_col = 0, main = titleStr,
labels_col = c(oldNames[(i-1)], oldNames[i]))
tempList[["heatMap"]] <- ph
resList[["pairResList"]][[i/2]] <- tempList
names(resList[["pairResList"]])[i/2] <- tissue
}
}
correlations$average <- rowMeans(correlations)
correlations$variance <- matrixStats::rowVars(as.matrix(correlations))
correlations <- correlations[order(correlations$variance,
decreasing = TRUE),]
resList[["Correlations"]] <- correlations
resList[["mode"]] <- mode
return(resList)
}
View(resList)
crossCompareResTPM <- correlationAnalyzeR::analyzeSingleGenes(
genesOfInterest = genesVec, crossCompareMode = TRUE
)
crossCompareResTPM <- correlationAnalyzeR::analyzeSingleGenes(
genesOfInterest = unique(genesVec), crossCompareMode = TRUE
)
View(crossCompareResTPM)
View(crossCompareResTPM)
View(crossCompareResTPM)
View(crossCompareResTPM)
options(shiny.reactlog=TRUE)
