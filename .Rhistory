TPMDFTwo$Gene <- paste0(colnames(TPMDFTwo)[3], "_", TPMDFTwo$Group)
TPMDFOne[,3] <- log2(TPMDFOne[,3] + 1)
TPMDFTwo[,3] <- log2(TPMDFTwo[,3] + 1)
colnames(TPMDFTwo)[3] <- "Log2TPM"
colnames(TPMDFOne)[3] <- "Log2TPM"
titleStr <- paste0(geneOne, " expression")
fillStr <- "Group"
}
genesOfInterest <- c("ATM", "ATM")
Species <- "hsapiens"
crossCompareMode = TRUE
returnDataOnly = TRUE
returnDataOnly = TRUE
outputPrefix = "CorrelationAnalyzeR_Output_Paired"
runGSEA = TRUE
topPlots = FALSE
Sample_Type = c("normal", "normal")
Tissue = c("brain", "respiratory")
GSEA_Type = c("simple", "complex")
lm_eqn <- function(df){
m <- stats::lm(eval(parse(text = colnames(df)[2])) ~ eval(parse(text = colnames(df)[1])), df)
r <- sqrt(summary(m)$r.squared) * sign(unname(stats::coef(m)[2]))
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(R)~"="~r,
list(a = format(unname(stats::coef(m)[1]), digits = 2),
b = format(unname(stats::coef(m)[2]), digits = 2),
r = format(r, digits = 2)))
as.character(as.expression(eq));
}
# If running in cross-comparison mode...
if (crossCompareMode) {
cat("\nRunning cross comparison mode ... \n")
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
useBlackList = TRUE)
runGSEA <- F
if (genesOfInterest[1] == genesOfInterest[2]) {
cat("\nGene one is the same as gene two ... \n")
if (Species == "mmusculus") {
stop("\nOnly normal tissues available for mouse",
" due to black-listing of cancer groups for low quality.",
"\nEnter two different genes or choose human ... \n")
}
cat("\nWill perform normal vs cancer comparison on",
genesOfInterest[1], "... \n")
mode <- "cross_normalVsCancer"
df <- as.data.frame(table(gsub(availTissue,
pattern = " - .*",
replacement = "")), stringsAsFactors = FALSE)
goodTissues <- df$Var1[which(df$Freq == 2)]
Tissue <- rep(goodTissues, each = 2)
Sample_Type <- rep(c("normal", "cancer"), length(goodTissues))
genesVec <- rep(genesOfInterest[1], length(Sample_Type))
} else {
geneOne <- genesOfInterest[1]
geneTwo <- genesOfInterest[2]
cat("\nGene one is not the same as gene two ... \n")
cat("\nWill perform comparison of",
geneOne, "and",
geneTwo, "across all available tissue-disease conditions... \n")
mode <- "cross_geneVsGene"
availTissue <- strsplit(availTissue, split = " - ")
Tissue <- sapply(availTissue, "[[", 1)
genesVec <- rep(genesOfInterest, length(Tissue))
Tissue <- rep(Tissue, each = 2)
Sample_Type <- sapply(availTissue, "[[", 2)
Sample_Type <- rep(Sample_Type, each = 2)
}
# Get TPM for each gene
geneUnique <- unique(genesVec)
# Get TPM for gene
geneTPMList <- correlationAnalyzeR::getTissueTPM(genesOfInterest = geneUnique,
Species = Species,
Tissues = "all",
Sample_Type = "all",
useBlackList = TRUE)
geneTPMDF <- data.table::rbindlist(geneTPMList, idcol = "group")
rawGroup <- geneTPMDF$group
rawGroup1 <- stringr::str_to_title(gsub(rawGroup,
pattern = "_.*",
replacement = ""))
rawGroup2 <- gsub(rawGroup, pattern = ".*_", replacement = "")
rawGroup2 <- stringr::str_to_title(gsub(rawGroup2,
pattern = "0",
replacement = " "))
geneTPMDF <- cbind(paste0(rawGroup2,
" - ",
rawGroup1),
rawGroup2,
rawGroup1,
geneTPMDF[,c(-1)])
colnames(geneTPMDF)[c(1:4)] <- c("Group", "Tissue", "sampleType", "Samples")
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
useBlackList = TRUE)
availTissue <- gsub(availTissue, pattern = "0", replacement = " ")
availTissue <- stringr::str_to_title(availTissue)
# all(geneTPMDF$Group %in% availTissue) #-- should be TRUE
geneTPMDF <- geneTPMDF[order(match(geneTPMDF$Group, availTissue)),]
# Make TPM plot
crossCompareResTPM <- list()
if (mode == "cross_geneVsGene") {
geneTPMDF[,5] <- log2(geneTPMDF[,5] + 1)
geneTPMDF[,6] <- log2(geneTPMDF[,6] + 1)
geneTPMDFToPlot <- geneTPMDF[,c(1,2, 3, 5, 6)]
geneTPMDFToPlot <- geneTPMDFToPlot %>%
gather("Gene", "TPM", -.data$Group, -.data$Tissue, -.data$sampleType)
geneOne <- geneUnique[1]
geneTwo <- geneUnique[2]
if (Species == "mmusculus") {
fillStr <- "Tissue"
} else {
fillStr <- "Group"
}
geneTPMDFToPlot1 <- geneTPMDFToPlot[which(geneTPMDFToPlot$Gene == geneOne),]
plotOne <- ggpubr::ggboxplot(data = geneTPMDFToPlot1,
x = fillStr, #facet.by = "Gene",
title = paste0(geneOne,
" expression across tissues"),
ylab = "log2(TPM + 1)",
fill = fillStr,
y = "TPM") +
ggpubr::rotate_x_text() +
ggpubr::rremove("legend") +
ggpubr::rremove("xlab")
geneTPMDFToPlot2 <- geneTPMDFToPlot[which(geneTPMDFToPlot$Gene == geneTwo),]
plotTwo <- ggpubr::ggboxplot(data = geneTPMDFToPlot2,
x = fillStr, #facet.by = "Gene",
title = paste0(geneTwo,
" expression across tissues"),
ylab = "log2(TPM + 1)",
fill = fillStr,
y = "TPM") +
ggpubr::rotate_x_text() +
ggpubr::rremove("legend") +
ggpubr::rremove("xlab")
colnames(geneTPMDF)[c(5:6)] <- paste0(colnames(geneTPMDF)[c(5:6)], "_log2TPM")
crossCompareResTPM[["TPM_boxPlotOne"]] <- plotOne
crossCompareResTPM[["TPM_boxPlotTwo"]] <- plotTwo
} else {
geneTPMDF[,5] <- log2(geneTPMDF[,5] + 1)
geneTPMDFToPlot <- geneTPMDF
colnames(geneTPMDFToPlot)[length(colnames(geneTPMDFToPlot))] <- "TPM"
plot <- ggpubr::ggboxplot(data = geneTPMDFToPlot,
x = "Group", #facet.by = "Gene",
title = paste0(geneUnique[1],
" expression across tissues"),
ylab = "log2(TPM + 1)",
fill = "Group",
y = "TPM") +
ggpubr::rotate_x_text() +
ggpubr::rremove("legend") +
ggpubr::rremove("xlab")
colnames(geneTPMDF)[c(5)] <- paste0(colnames(geneTPMDF)[c(5)], "_log2TPM")
crossCompareResTPM[["TPM_boxPlot"]] <- plot
}
crossCompareResTPM[["TPM_DF"]] <- geneTPMDF
# Do paired to get correlation data
pairRes <- correlationAnalyzeR::analyzeSingleGenes(
genesOfInterest = genesVec,
returnDataOnly = returnDataOnly, topPlots = topPlots,
outputPrefix = outputPrefix, runGSEA = runGSEA,
Sample_Type = Sample_Type, Tissue = Tissue,
Species = Species, GSEA_Type = GSEA_Type
)
n <- length(names(pairRes))
oldNames <- names(pairRes)[1:(n-1)]
newNames <- gsub(oldNames, pattern = ", ", replacement = "_")
newNames <- gsub(newNames, pattern = " - ", replacement = "_")
newNames <- gsub(newNames, pattern = " ", replacement = "0")
correlations <- pairRes$correlations
colnames(correlations) <- newNames
resList <- list()
resList[["pairResList"]] <- list()
for (i in 1:length(colnames(correlations))) {
samp <- colnames(correlations)[i]
if (i %% 2 == 0) {
dfRaw <- correlations[,c((i-1), i)]
df <- dfRaw
tempList <- list()
tissue <- stringr::str_match(colnames(df)[1], pattern = "_(.*)")[,2]
tissue <- gsub(tissue, pattern = "_", replacement = " - ")
tissue <- gsub(tissue, pattern = "0", replacement = " ")
tissueSmall <- gsub(tissue, pattern = " - .*", replacement = "")
df$Gene <- F
df$Gene[which(rownames(df) %in% unique(genesVec))] <- T
titleStr <- ifelse(genesOfInterest[1] == genesOfInterest[2], yes = tissueSmall,
no = tissue)
labb <- lm_eqn(df)
# xtex <- eval(parse(text = colnames(df)[1]))
# ytex <- eval(parse(text = colnames(df)[2]))
gp <- ggplot2::ggplot(data = df,
mapping = ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[2])) +
ggplot2::stat_bin2d(bins = 150) +
ggplot2::geom_smooth(colour="black", size = 1.25,
method='lm') +
ggplot2::labs(title = titleStr) +
ggplot2::ylab(oldNames[(i-1)]) +
ggplot2::xlab(oldNames[i]) +
ggplot2::annotate("text", x = 0, y = 1.1,
label = labb,
parse = TRUE) +
ggpubr::theme_pubr() +
ggplot2::theme(legend.position = "none")
tempList[["scatterPlot"]] <- gp
dfRaw$Variance <- matrixStats::rowVars(as.matrix(dfRaw))
tempList[["correlations"]] <- dfRaw
dfRaw <- dfRaw[which(! rownames(dfRaw) %in% genesOfInterest),]
dfRawUp <- dfRaw[dfRaw[,1] > 0,]
dfRawUp <- dfRawUp[order(dfRawUp$Variance, decreasing = TRUE),]
dfRawUpSmall <- dfRawUp[c(1:15),]
dfRawDn <- dfRaw[dfRaw[,1] < 0,]
dfRawDn <- dfRawDn[order(dfRawDn$Variance, decreasing = TRUE),]
dfRawDnSmall <- dfRawDn[c(1:15),]
dfPh <- rbind(dfRawUpSmall, dfRawDnSmall)
dfPh <- dfPh[,c(-3)]
if (mode == "cross_geneVsGene") {
ph <- pheatmap::pheatmap(dfPh, cluster_cols = FALSE,
silent = TRUE, angle_col = 0, main = titleStr,
labels_col = c(genesOfInterest[1],
genesOfInterest[2]))
} else {
ph <- pheatmap::pheatmap(dfPh, cluster_cols = FALSE,
silent = TRUE, angle_col = 0, main = titleStr,
labels_col = c("Normal", "Cancer"))
}
tempList[["heatMap"]] <- ph
resList[["pairResList"]][[i/2]] <- tempList
names(resList[["pairResList"]])[i/2] <- tissue
}
}
correlations$average <- rowMeans(correlations)
correlations$variance <- matrixStats::rowVars(as.matrix(correlations))
correlations <- correlations[order(correlations$variance,
decreasing = TRUE),]
resList[["Correlations"]] <- correlations
resList[["crossCompareTPM"]] <- crossCompareResTPM
resList[["mode"]] <- mode
return(resList)
}
View(resList)
resList[["crossCompareTPM"]][["TPM_boxPlot"]]
devtools::build_manual()
Sys.which("pdflatex")
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:/Users/mille/AppData/Local/Programs/MiKTeX 2.9/miktex/bin/x64/", sep=.Platform$path.sep))
Sys.which("pdflatex")
devtools::build_manual()
person("Hadley", "Wickham", email = "hadley@rstudio.com",
role = c("aut", "cre"))
person("Henry", "Miller", email = "millerh1@livemail.uthscsa.edu",
role = c("aut", "cre"))
person("Henry", "Miller", email = "millerh1@livemail.uthscsa.edu",
role = c("aut", "cre"))
devtools::build_manual()
c(person("Henry", "Miller", email = "millerh1@livemail.uthscsa.edu",
role = c("aut", "cre")))
devtools::build_manual()
devtools::build_manual()
c(person("Henry", "Miller", email = "millerh1@livemail.uthscsa.edu",
role = c("aut", "cre")))
person("Henry", "Miller", email = "millerh1@livemail.uthscsa.edu",
role = c("aut", "cre"))
devtools::build_manual()
devtools::build_manual()
if (!"BiocManager" %in% rownames(installed.packages()))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
library(BiocCheck)
BiocCheck("packageDirOrTarball")
library(BiocCheck)
BiocCheck(".")
library(BiocCheck)
BiocCheck(".")
availTissue <- correlationAnalyzeR::getTissueTypes()
Tissue <- sapply(availTissue, "[[", 1)
Tissue <- vapply(availTissue, "[[", 1)
Tissue <- vapply(availTissue, FUN = "[[", 1)
Tissue <- vapply(availTissue, FUN = "[[",FUN.VALUE =  1)
Tissue <- vapply(availTissue, tail,  1)
Tissue <- vapply(availTissue, tail)
Tissue <- vapply(availTissue, FUN = "[[", FUN.VALUE = "character", 1)
vapply(availTissue, FUN = "[[", FUN.VALUE = "character", 1)
Tissue <- sapply(availTissue, "[[", 1)
Tissue1 <- vapply(availTissue, FUN = "[[", FUN.VALUE = "character", 1)
Tissue == Tissue1
all(Tissue == Tissue1)\
all(Tissue == Tissue1)
Species = "hsapiens"
Sample_Type = "normal"
Tissue = "brain"
geneList = c("ATM", "BRCA1")
if (Species == "hsapiens") {
geneNames <- correlationAnalyzeR::hsapiens_corrSmall_geneNames
} else {
geneNames <- correlationAnalyzeR::mmusculus_corrSmall_geneNames
}
# Queries from multiple db at once
if (length(Tissue) == 1) {
Tissue <- rep(Tissue, length(geneList))
} else if (length(Tissue) > 1) {
if (length(Tissue) != length(geneList)) {
stop("Number of valid genes not equal
to length of supplied Tissue vector.
Tissue vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
if (length(Sample_Type) == 1) {
Sample_Type <- rep(Sample_Type, length(geneList))
} else if (length(Sample_Type) > 1) {
if (length(Sample_Type) != length(geneList)) {
stop("Number of valid genes not equal
to length of supplied Sample_Type vector.
Sample_Type vector should include 1 entry or the number of
entries equal to the number of genesOfInterest.")
}
}
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
if (length(unique(Tissue)) == 1 & length(unique(Sample_Type)) == 1) {
if (Tissue == "respiratory") {
TissueNow <- "repiratory"
} else {
TissueNow <- Tissue
}
sql <- paste0("SELECT * FROM correlations_",
Species, "_",
tolower(unique(Sample_Type)), "_",
tolower(unique(TissueNow)),
" WHERE row_names IN ('",
paste(geneList, collapse = "','"), "')")
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resdf2 <- vapply(resdf$values, FUN = strsplit, FUN.VALUE = "character", ",")
names(resdf2) <- resdf$row_names
resdf2 <- lapply(resdf2, as.numeric)
resdf2 <- as.data.frame(resdf2)
rownames(resdf2) <- geneNames
} else {
resDfList <- list()
for ( i in 1:length(geneList) ) {
geneName <- geneList[i]
TissueNow <- Tissue[i]
if (TissueNow == "respiratory") {
TissueNow2 <- "repiratory"
} else {
TissueNow2 <- TissueNow
}
Sample_TypeNow <- Sample_Type[i]
sql <- paste0("SELECT * FROM correlations_",
Species, "_",
tolower(Sample_TypeNow), "_", tolower(TissueNow2),
" WHERE row_names IN ('",
geneName, "')")
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resdf2 <- vapply(resdf$values, FUN = strsplit, FUN.VALUE = "character", ",")
names(resdf2) <- resdf$row_names
resdf2 <- lapply(resdf2, as.numeric)
resdf2 <- as.data.frame(resdf2)
rownames(resdf2) <- geneNames
resDfList[[i]] <- resdf2
}
resdf2 <- do.call(cbind, resDfList)
}
DBI::dbDisconnect(conn = con)
resdf$values
resdf2 <- vapply(resdf$values, FUN = strsplit, FUN.VALUE = "character", ",")
resdf2 <- vapply(resdf$values, FUN = strsplit, FUN.VALUE = "list", ",")
resdf2 <- vapply(resdf$values, FUN = strsplit, FUN.VALUE = "list", ",")
vapply(resdf$values, FUN = strsplit, FUN.VALUE = "list", ",")
n <- length(resdf$row_names)
resdf2 <- vapply(resdf$values, FUN = strsplit, FUN.VALUE = n, ",")
resdf2 <- vapply(resdf$values, FUN = strsplit, FUN.VALUE = list, ",")
resdf2 <- vapply(resdf$values, FUN = strsplit, FUN.VALUE = c(list()), ",")
resdf2 <- vapply(resdf$values, FUN = sub, FUN.VALUE = "character", ",", " ")
resdf2 <- vapply(resdf$values, FUN = sub, FUN.VALUE = "character",
pattern =  ",", replacement = " ")
resdf2
stringr::fixed()
stringr::str_split_fixed(resdf$values, stringr::fixed(","))
stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)
stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)[,2]
stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)[1,]
stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)[2,]
stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)[2,1]
stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)[2]
resdf2 <- stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)
dim(resdf2)
colnames(resdf2)
resdf$row_names
resdf$values
resdf2 <- as.numeric(resdf2)
resdf2 <- apply(resdf2, 1:2, as.numeric)
resdf2 <- stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)
resdf2 <- apply(resdf2, 1:2, as.numeric)
resdf2 <- stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)
resdf2 <- apply(t(resdf2), 1:2, as.numeric)
resdf2 <- as.data.frame(resdf2)
colnames(resdf2) <- resdf$row_names
rownames(resdf2) <- geneNames
View(resdf2)
library(BiocCheck)
BiocCheck(".")
genesOfInterest = c("BRCA1", "ATM")
Species = "hsapiens"
Tissues = "all"
Sample_Type = "all"
useBlackList = TRUE
if (Species[1] == "hsapiens") {
samples <- correlationAnalyzeR::sampleTPMOrderHuman
possibleGenes <- correlationAnalyzeR::humanGenesTPM
} else {
samples <- correlationAnalyzeR::sampleTPMOrderMouse
possibleGenes <- correlationAnalyzeR::mouseGenesTPM
}
# Get samples for each tissue group
possibleTissues <- correlationAnalyzeR::getTissueTypes(Species = Species,
useBlackList = useBlackList)
possibleTissues1 <- gsub(possibleTissues, pattern = " - .*", replacement = "")
possibleTissues2 <- gsub(possibleTissues, pattern = ".* - ", replacement = "")
possibleRetrieval <- paste0(possibleTissues2, "_", possibleTissues1)
if (Tissues == "all") {
ofInterest <- possibleRetrieval
} else {
ofInterest <- possibleRetrieval[grep(x = possibleRetrieval,
pattern = paste0(Tissues, collapse = "|"))]
if (! length(ofInterest)) {
stop("No valid tissue types returned. Please check that your tissue types are ",
"correct by running getTissueTypes()")
}
}
ofInterest <- gsub(x = ofInterest, pattern = "respiratory", replacement = "repiratory")
if (Sample_Type != "all") {
ofInterest <- ofInterest[grep(x = ofInterest,
pattern = paste0(Sample_Type, collapse = "|"))]
}
genesOfInterest <- unique(genesOfInterest)
genesOfInterestBad <- genesOfInterest[which(! genesOfInterest %in% possibleGenes)]
genesOfInterestFinal <- genesOfInterest[which(genesOfInterest %in% possibleGenes)]
if (! length(genesOfInterestFinal)) {
stop(paste0(genesOfInterestBad, collapse = ", "), " not found in TPM data.",
" view data(humanTPMGenes) or data(mouseTPMGenes) to see available gene list")
} else if (length(genesOfInterestBad)) {
warning(paste0(genesOfInterestBad, collapse = ", "), " not found in TPM data.",
" view data(humanTPMGenes) or data(mouseTPMGenes) to see available gene list")
}
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
sql <- paste0("SELECT * FROM ",
Species, "_sample_group_key ",
" WHERE row_names IN ('",
paste(ofInterest, collapse = "','"), "')")
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
resdf2 <- data.frame(row.names = resdf$row_names, samples = resdf$samples)
resdfList <- stats::setNames(split(resdf2, seq(nrow(resdf2))), rownames(resdf2))
newList <- lapply(resdfList, FUN = function(x){
newX <- as.character(x[,1])
newX <- unlist(strsplit(newX, split = ","))
})
# Gather TPM across samples for genes of interest
sql <- paste0("SELECT * FROM TPM_",
Species,
" WHERE row_names IN ('",
paste(genesOfInterestFinal, collapse = "','"), "')")
res <- DBI::dbSendQuery(conn = con, statement = sql)
resdf <- DBI::dbFetch(res, n=-1)
DBI::dbClearResult(res)
DBI::dbDisconnect(con)
resdf$row_names
# Parse TPM frame
resdf2 <- stringr::str_split_fixed(resdf$values, stringr::fixed(","), n = Inf)
resdf2 <- apply(t(resdf2), 1:2, as.numeric)
resdf2 <- as.data.frame(resdf2)
colnames(resdf2) <- resdf$row_names
resdf2$samples <- samples
rownames(resdf2) <- NULL
Species = "hsapiens"
useBlackList = TRUE
Species <- Species[1]
con <- DBI::dbConnect(RMySQL::MySQL(), user = "public-rds-user", port = 3306,
dbname="bishoplabdb",
password='public-user-password',
host="bishoplabdb.cyss3bq5juml.us-west-2.rds.amazonaws.com")
tabs <- DBI::dbListTables(con)
tabs <- tabs[grep(tabs, pattern = paste0("correlations_", Species))]
tabs <- gsub(tabs, pattern = paste0("correlations_", Species, "_"),
replacement = "")
tabs <- gsub(tabs, pattern = "repiratory",
replacement = "respiratory")
if (useBlackList) {
blackListHuman <- correlationAnalyzeR::blackListHuman
blackListMouse <- correlationAnalyzeR::blackListMouse
if (Species == "hsapiens") {
blackList <- blackListHuman
} else {
blackList <- blackListMouse
}
tabs <- tabs[grep(x = tabs, pattern = paste(blackList, collapse = "|"), invert = TRUE)]
}
tabs <- strsplit(tabs, split = "_")
tissues <- vapply(tabs, "[[", FUN.VALUE = "character", 2)
types <- vapply(tabs, "[[", FUN.VALUE = "character", 1)
result <- paste0(tissues, " - ", types)
result <- result[order(result)]
DBI::dbDisconnect(con)
