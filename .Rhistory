show_rownames = FALSE, breaks = breaks[[2]],
labels_col = namesVecNow)
breaks <- getPhBreaks(pMatCoBig)
phBigCo <- pheatmap::pheatmap(pMatCoBig, silent = TRUE, angle_col = 45,
show_rownames = FALSE, breaks = breaks[[2]],
labels_col = namesVecNow)
# Get TPM for gene
geneTPMList <- correlationAnalyzeR::getTissueTPM(genesOfInterest = geneNow,
Species = Species,
Tissues = "all", pool = pool,
Sample_Type = whichCompareGroups[1],
useBlackList = TRUE)
# Make TPM plot
geneTPMDF <- data.table::rbindlist(geneTPMList, idcol = "group")
colnames(geneTPMDF)[3] <- "value"
geneTPMDF$value <- log2(geneTPMDF$value + 1)
rawGroup <- geneTPMDF$group
rawGroup1 <- gsub(rawGroup, pattern = "_.*", replacement = "")
rawGroup2 <- gsub(rawGroup, pattern = ".*_", replacement = "")
rawGroup2 <- gsub(rawGroup2, pattern = "0", replacement = " ")
geneTPMDF$group <- paste0(rawGroup2, " - ", rawGroup1)
geneTPMDF$group <- stringr::str_to_title(geneTPMDF$group)
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
pool = pool,
useBlackList = TRUE)
availTissue <- gsub(availTissue, pattern = "0", replacement = " ")
availTissue <- stringr::str_to_title(availTissue)
# all(geneTPMDF$group %in% availTissue) -- should be TRUE
geneTPMDF <- geneTPMDF[order(match(geneTPMDF$group, availTissue)),]
if (! whichCompareGroups == "all") {
if (whichCompareGroups == "normal") {
geneTPMDF$group <- gsub(geneTPMDF$group,
pattern = "(.*) - (.*)",
replacement = "\\1")
} else {
geneTPMDF$group <- gsub(geneTPMDF$group,
pattern = "(.*) - (.*)",
replacement = "\\1")
}
TPMBPproto <- ggpubr::ggboxplot(data = geneTPMDF,
x = "group",
title = titleNameExp,
ylab = "log2(TPM + 1)",
fill = "group",
y = "value")
TPMBP <- TPMBPproto +
ggpubr::rotate_x_text(angle = 45) +
ggpubr::rremove("legend") +
ggpubr::rremove("xlab")
} else {
geneTPMDF$tissue <- gsub(geneTPMDF$group,
pattern = "(.*) - (.*)",
replacement = "\\1")
geneTPMDF$sample <- gsub(geneTPMDF$group,
pattern = "(.*) - (.*)",
replacement = "\\2")
goodTiss <- unique(geneTPMDF$tissue[which(geneTPMDF$sample == "Cancer")])
goodTiss2 <- unique(geneTPMDF$tissue[which(geneTPMDF$sample == "Normal")])
goodTissFinal <- goodTiss[which(goodTiss %in% goodTiss2)]
geneTPMDF2 <- geneTPMDF[which(geneTPMDF$tissue %in% goodTissFinal),]
maxHeight <- max(geneTPMDF2$value)
TPMBPproto <- ggpubr::ggboxplot(data = geneTPMDF2,
x = "tissue",
title = titleNameExp,
ylab = "log2(TPM + 1)",
fill = "sample", legend = "right",
y = "value") +
ggpubr::stat_compare_means(ggplot2::aes_string(group = "sample"),
label.y = (maxHeight * 1.15),
hide.ns = TRUE, label = "p.signif")
TPMBP <- TPMBPproto +
ggpubr::rotate_x_text(angle = 45) +
ggpubr::rremove("xlab") + ggpubr::rremove("legend.title")
}
colnames(geneTPMDF)[3] <- paste0(geneNow, "_log2TPM")
resList[[i]][["TPM_DF"]] <- geneTPMDF
resList[[i]][["TPM_boxPlot"]] <- TPMBP
resList[[i]][["heatmapSmallCo"]] <- phSmallCo
resList[[i]][["heatmapSmallDataCo"]] <- pMatCo
resList[[i]][["heatmapBigCo"]] <- phBigCo
resList[[i]][["heatmapBigDataCo"]] <- pMatCoBig
resList[[i]][["heatmapSmallVar"]] <- phSmallVar
resList[[i]][["heatmapSmallDataVar"]] <- pMatVar
resList[[i]][["heatmapBigVar"]] <- phBigVar
resList[[i]][["heatmapBigDataVar"]] <- pMatVarBig
}
geneList <- unique(genesOfInterest)
geneNow <- geneList[i]
i <- 1
geneNow <- geneList[i]
resList[[i]] <- list()
names(resList)[i] <- geneNow
inds <- which(genesOfInterest == geneNow)
newDF <- corrDF[,inds]
topNameNow <- topName[inds]
colnames(newDF) <- topNameNow
crossCompareMode
resList <- list()
resList <- list()
# Main code
for (i in 1:length(colnames(corrDF))) {
gene <- colnames(corrDF)[i]
cat(paste0("\nAnalyzing: ", gene))
# Create output folder for gene
geneOutDir <- file.path(outputPrefix, gene)
if (! dir.exists(geneOutDir) & ! returnDataOnly) {
dir.create(geneOutDir)
}
# Remove gene from correlation values to build normal distribution
vec <- corrDF[,i]
names(vec) <- rownames(corrDF)
vec <- vec[order(vec, decreasing = TRUE)]
vec <- vec[c(-1)]
# Make a histogram of gene correlations
corrDF2 <- corrDF[which(rownames(corrDF) != gene),i, drop = F]
geneOne <- genesOfInterest[i]
tissueOne <- Tissue[i]
tissueOne <- gsub(tissueOne, pattern = "0", replacement = " ")
sampleOne <- Sample_Type[i]
geneOneTitle <- paste0(geneOne, ", ",
stringr::str_to_title(tissueOne),
" - ",
stringr::str_to_title(sampleOne))
p <- ggpubr::gghistogram(data = corrDF2, x = gene, y = "..count..",
bins = 100, ylab = "Frequency\n",
title = gene,
caption = paste0(stringr::str_to_title(tissueOne),
" - ",
stringr::str_to_title(sampleOne)),
xlab = paste0(gene, " correlation values"))
resList[[i]] <- list()
names(resList)[i] <- geneOneTitle
geneOneTitleFile <- gsub(pattern = ",| |-", replacement = "", x = geneOneTitle)
resList[[geneOneTitle]][["corrHist"]] <- p
if (! returnDataOnly) {
ggplot2::ggsave(filename = file.path(geneOutDir,
paste0(geneOneTitleFile, ".png")),
plot = p)
}
if (runGSEA) {
# Perform GSEA
cat("\nGSEA\n")
resGSEA <- suppressWarnings(
correlationAnalyzeR::myGSEA(ranks = vec, TERM2GENE = TERM2GENE,
plotFile = paste0(geneOneTitleFile,
".corrPathways"),
outDir = geneOutDir,
nperm = nperm,
topPlots = topPlots,
returnDataOnly = returnDataOnly,
Condition = paste0(geneOneTitle,
": Correlated Genes"))
)
resList[[geneOneTitle]][["GSEA"]] <- resGSEA
}
}
resList[["correlations"]] <- corrDF
pDF <- apply(corrDF, MARGIN = 1:2, n = length(corrDF[,1]), FUN = function(x, n) {
## Using R to Z conversion method
# z <- 0.5 * log((1+x)/(1-x))
# zse <- 1/sqrt(colLengths-3)
# p <- min(pnorm(z, sd=zse), pnorm(z, lower.tail=F, sd=zse))*2
# Using the t statistic method
dt(abs(x)/sqrt((1-x^2)/(n-2)), df = 2)
})
resList[["P values"]] <- as.data.frame(pDF)
resList$`BRCA1, All - Normal`
resList$`BRCA1, All - Normal`$corrHist
resList$`BRCA1, All - Normal`$GSEA
dd <- resList$`BRCA1, All - Normal`$GSEA$eres
View(dd)
genesOfInterest <- c("BRCA1", "BRCA1")
Species <- "hsapiens"
crossCompareMode = FALSE
returnDataOnly = TRUE
returnDataOnly = TRUE
outputPrefix = "CorrelationAnalyzeR_Output_Paired"
runGSEA = TRUE
topPlots = FALSE
Sample_Type = c("normal", "cancer")
Tissue = c("all", "all")
TERM2GENE = NULL
GSEA_Type = c("none")
pool = NULL
runGSEA = FALSE
sampler = FALSE
nperm = 2000
getPhBreaks <- function(mat, palette = NULL) {
# From https://stackoverflow.com/questions/31677923/set-0-point-for-pheatmap-in-r
if (is.null(palette)) {
palette <- grDevices::colorRampPalette(rev(
RColorBrewer::brewer.pal(n = 7, name =
"RdYlBu")))(100)
}
n <- length(palette)
breaks <- c(seq(min(mat), 0, length.out=ceiling(n/2) + 1),
seq(max(mat)/n, max(mat), length.out=floor(n/2)))
return(list(palette, breaks))
}
if (! is.null(pool)) {
if (! pool$valid) {
pool <- NULL
}
}
if (is.null(pool)) {
if (makePool) {
retryCounter <- 1
cat("\nEstablishing connection to database ... \n")
while(is.null(pool)) {
pool <- try(silent = T, eval({
pool::dbPool(
drv = RMySQL::MySQL(),
user = "public-rds-user@m2600az-db01p.mysql.database.azure.com", port = 3306,
dbname="correlation_analyzer",
password='public-user-password',
host="m2600az-db01p.mysql.database.azure.com"
)
}))
if ("try-error" %in% class(pool)) {
if (retryCounter == 3) {
stop("Unable to connect to database. Check internet connection and please contanct",
" package maintainer if you believe this is an error.")
}
warning(paste0("Failed to establish connection to database ... retrying now ... ",
(4-retryCounter), " attempts left."),
immediate. = T)
pool <- NULL
retryCounter <- retryCounter + 1
}
}
on.exit(pool::poolClose(pool))
}
}
lm_eqn <- function(df){
m <- stats::lm(eval(parse(text = colnames(df)[2])) ~ eval(parse(text = colnames(df)[1])), df)
r <- sqrt(summary(m)$r.squared) * sign(unname(stats::coef(m)[2]))
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(R)~"="~r,
list(a = format(unname(stats::coef(m)[1]), digits = 2),
b = format(unname(stats::coef(m)[2]), digits = 2),
r = format(r, digits = 2)))
as.character(as.expression(eq));
}
lm_eqn()
crossCompareMode
# If running in cross-comparison mode...
if (crossCompareMode) {
cat("\nRunning cross comparison mode ... \n")
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
pool = pool,
useBlackList = TRUE)
runGSEA <- F
if (genesOfInterest[1] == genesOfInterest[2]) {
cat("\nGene one is the same as gene two ... \n")
if (Species == "mmusculus") {
stop("\nOnly normal tissues available for mouse",
" due to black-listing of cancer groups for low quality.",
"\nEnter two different genes or choose human ... \n")
}
cat("\nWill perform normal vs cancer comparison on",
genesOfInterest[1], "... \n")
mode <- "cross_normalVsCancer"
df <- as.data.frame(table(gsub(availTissue,
pattern = " - .*",
replacement = "")), stringsAsFactors = FALSE)
goodTissues <- df$Var1[which(df$Freq == 2)]
Tissue <- rep(goodTissues, each = 2)
Sample_Type <- rep(c("normal", "cancer"), length(goodTissues))
genesVec <- rep(genesOfInterest[1], length(Sample_Type))
} else {
geneOne <- genesOfInterest[1]
geneTwo <- genesOfInterest[2]
cat("\nGene one is not the same as gene two ... \n")
cat("\nWill perform comparison of",
geneOne, "and",
geneTwo, "across all available tissue-disease conditions... \n")
mode <- "cross_geneVsGene"
availTissue <- strsplit(availTissue, split = " - ")
Tissue <- vapply(availTissue, FUN = "[[", FUN.VALUE = "character", 1)
genesVec <- rep(genesOfInterest, length(Tissue))
Tissue <- rep(Tissue, each = 2)
Sample_Type <- vapply(availTissue, FUN = "[[", FUN.VALUE = "character", 2)
Sample_Type <- rep(Sample_Type, each = 2)
}
# Get TPM for each gene
geneUnique <- unique(genesVec)
geneTPMList <- correlationAnalyzeR::getTissueTPM(genesOfInterest = geneUnique,
Species = Species,
Tissues = "all",
pool = pool,
Sample_Type = "all",
useBlackList = TRUE)
geneTPMDF <- data.table::rbindlist(geneTPMList, idcol = "group")
rawGroup <- geneTPMDF$group
rawGroup1 <- stringr::str_to_title(gsub(rawGroup,
pattern = "_.*",
replacement = ""))
rawGroup2 <- gsub(rawGroup, pattern = ".*_", replacement = "")
rawGroup2 <- stringr::str_to_title(gsub(rawGroup2,
pattern = "0",
replacement = " "))
geneTPMDF <- cbind(paste0(rawGroup2,
" - ",
rawGroup1),
rawGroup2,
rawGroup1,
geneTPMDF[,c(-1)])
colnames(geneTPMDF)[c(1:4)] <- c("Group", "Tissue", "sampleType", "Samples")
availTissue <- correlationAnalyzeR::getTissueTypes(Species = Species,
pool = pool,
useBlackList = TRUE)
availTissue <- gsub(availTissue, pattern = "0", replacement = " ")
availTissue <- stringr::str_to_title(availTissue)
# all(geneTPMDF$Group %in% availTissue) #-- should be TRUE
geneTPMDF <- geneTPMDF[order(match(geneTPMDF$Group, availTissue)),]
# Make TPM plot
crossCompareResTPM <- list()
if (mode == "cross_geneVsGene") {
geneTPMDF[,5] <- log2(geneTPMDF[,5] + 1)
geneTPMDF[,6] <- log2(geneTPMDF[,6] + 1)
geneTPMDFToPlot <- geneTPMDF[,c(1,2, 3, 5, 6)]
geneTPMDFToPlot <- geneTPMDFToPlot %>%
gather("Gene", "TPM", -.data$Group, -.data$Tissue, -.data$sampleType)
geneOne <- geneUnique[1]
geneTwo <- geneUnique[2]
if (Species == "mmusculus") {
fillStr <- "Tissue"
} else {
fillStr <- "Group"
}
geneTPMDFToPlot1 <- geneTPMDFToPlot[which(geneTPMDFToPlot$Gene == geneOne),]
plotOne <- ggpubr::ggboxplot(data = geneTPMDFToPlot1,
x = fillStr, #facet.by = "Gene",
title = paste0(geneOne,
" expression across tissue groups"),
ylab = "log2(TPM + 1)",
fill = fillStr,
y = "TPM") +
ggpubr::rotate_x_text(angle = 45) +
ggpubr::rremove("legend") +
ggpubr::rremove("xlab")
geneTPMDFToPlot2 <- geneTPMDFToPlot[which(geneTPMDFToPlot$Gene == geneTwo),]
plotTwo <- ggpubr::ggboxplot(data = geneTPMDFToPlot2,
x = fillStr, #facet.by = "Gene",
title = paste0(geneTwo,
" expression across conditions"),
ylab = "log2(TPM + 1)",
fill = fillStr,
y = "TPM") +
ggpubr::rotate_x_text(angle = 45) +
ggpubr::rremove("legend") +
ggpubr::rremove("xlab")
colnames(geneTPMDF)[c(5:6)] <- paste0(colnames(geneTPMDF)[c(5:6)], "_log2TPM")
crossCompareResTPM[["TPM_boxPlotOne"]] <- plotOne
crossCompareResTPM[["TPM_boxPlotTwo"]] <- plotTwo
} else {
geneTPMDF[,5] <- log2(geneTPMDF[,5] + 1)
geneTPMDFToPlot <- geneTPMDF
colnames(geneTPMDFToPlot)[length(colnames(geneTPMDFToPlot))] <- "TPM"
goodTiss <- unique(geneTPMDFToPlot$Tissue[which(geneTPMDFToPlot$sampleType == "Cancer")])
goodTiss2 <- unique(geneTPMDFToPlot$Tissue[which(geneTPMDFToPlot$sampleType == "Normal")])
goodTissFinal <- goodTiss[which(goodTiss %in% goodTiss2)]
geneTPMDF2 <- geneTPMDFToPlot[which(geneTPMDFToPlot$Tissue %in% goodTissFinal),]
maxHeight <- max(geneTPMDF2$TPM)
TPMBPproto <- ggpubr::ggboxplot(data = geneTPMDF2,
x = "Tissue",
title = paste0(geneUnique[1],
" expression across tissues"),
ylab = "log2(TPM + 1)",
fill = "sampleType", legend = "right",
y = "TPM") +
ggpubr::stat_compare_means(ggplot2::aes_string(group = "sampleType"),
label.y = (maxHeight * 1.15),
hide.ns = TRUE, label = "p.signif")
plot <- TPMBPproto +
ggpubr::rotate_x_text(angle = 45) +
ggpubr::rremove("xlab") + ggpubr::rremove("legend.title")
colnames(geneTPMDF)[c(5)] <- paste0(colnames(geneTPMDF)[c(5)], "_log2TPM")
crossCompareResTPM[["TPM_boxPlot"]] <- plot
}
crossCompareResTPM[["TPM_DF"]] <- geneTPMDF
# Do paired to get correlation data
pairRes <- correlationAnalyzeR::analyzeSingleGenes(
genesOfInterest = genesVec, pool = pool, TERM2GENE = TERM2GENE,
returnDataOnly = returnDataOnly, topPlots = topPlots,
outputPrefix = outputPrefix, runGSEA = FALSE,
Sample_Type = Sample_Type, Tissue = Tissue,
Species = Species, GSEA_Type = GSEA_Type
)
n <- length(names(pairRes))
oldNames <- names(pairRes)[1:(n-2)]
newNames <- gsub(oldNames, pattern = ", ", replacement = "_")
newNames <- gsub(newNames, pattern = " - ", replacement = "_")
newNames <- gsub(newNames, pattern = " ", replacement = "0")
correlations <- pairRes$correlations
pVals <- pairRes[["P values"]]
colnames(correlations) <- newNames
colnames(pVals) <- newNames
resList <- list()
resList[["pairResList"]] <- list()
for (i in 1:length(colnames(correlations))) {
samp <- colnames(correlations)[i]
if (i %% 2 == 0) {
dfRaw <- correlations[,c((i-1), i)]
df <- dfRaw
tempList <- list()
tissue <- stringr::str_match(colnames(df)[1], pattern = "_(.*)")[,2]
tissue <- gsub(tissue, pattern = "_", replacement = " - ")
tissue <- gsub(tissue, pattern = "0", replacement = " ")
tissueSmall <- gsub(tissue, pattern = " - .*", replacement = "")
df$Gene <- F
df$Gene[which(rownames(df) %in% unique(genesVec))] <- T
titleStr <- ifelse(genesOfInterest[1] == genesOfInterest[2], yes = tissueSmall,
no = tissue)
labb <- lm_eqn(df)
# xtex <- eval(parse(text = colnames(df)[1]))
# ytex <- eval(parse(text = colnames(df)[2]))
gp <- ggplot2::ggplot(data = df,
mapping = ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[2])) +
ggplot2::stat_bin2d(bins = 150) +
ggplot2::geom_smooth(colour="black", size = 1.25,
method='lm') +
ggplot2::labs(title = titleStr) +
ggplot2::ylab(oldNames[(i-1)]) +
ggplot2::xlab(oldNames[i]) +
ggplot2::annotate("text", x = 0, y = 1.2,
label = labb,
parse = TRUE) +
ggpubr::theme_pubr() +
ggplot2::theme(legend.position = "none")
tempList[["scatterPlot"]] <- gp
dfRaw$Variance <- matrixStats::rowVars(as.matrix(dfRaw))
tempList[["correlations"]] <- dfRaw
dfRaw <- dfRaw[which(! rownames(dfRaw) %in% genesOfInterest),]
dfRawUp <- dfRaw[dfRaw[,1] > 0,]
dfRawUp <- dfRawUp[order(dfRawUp$Variance, decreasing = TRUE),]
dfRawUpSmall <- dfRawUp[c(1:15),]
dfRawDn <- dfRaw[dfRaw[,1] < 0,]
dfRawDn <- dfRawDn[order(dfRawDn$Variance, decreasing = TRUE),]
dfRawDnSmall <- dfRawDn[c(1:15),]
dfPh <- rbind(dfRawUpSmall, dfRawDnSmall)
dfPh <- dfPh[,c(-3)]
if (mode == "cross_geneVsGene") {
breaks <- getPhBreaks(dfPh)
ph <- pheatmap::pheatmap(dfPh, cluster_cols = FALSE,
breaks = breaks[[2]],
silent = TRUE, angle_col = 0, main = titleStr,
labels_col = c(genesOfInterest[1],
genesOfInterest[2]))
} else {
breaks <- getPhBreaks(dfPh)
ph <- pheatmap::pheatmap(dfPh, cluster_cols = FALSE,
breaks = breaks[[2]],
silent = TRUE, angle_col = 0, main = titleStr,
labels_col = c("Normal", "Cancer"))
}
tempList[["heatMap"]] <- ggplotify::as.ggplot(ph)
resList[["pairResList"]][[i/2]] <- tempList
names(resList[["pairResList"]])[i/2] <- tissue
}
}
correlations$average <- rowMeans(correlations)
correlations$variance <- matrixStats::rowVars(as.matrix(correlations))
correlations <- correlations[order(correlations$variance,
decreasing = TRUE),]
resList[["Correlations"]] <- correlations
resList[["P values"]] <- pVals
resList[["crossCompareTPM"]] <- crossCompareResTPM
resList[["mode"]] <- mode
return(resList)
}
# If running in normal mode ...
if (length(genesOfInterest) == 2 ) {
pairRes <- correlationAnalyzeR::analyzeSingleGenes(
genesOfInterest = genesOfInterest, pool = pool,
returnDataOnly = returnDataOnly, topPlots = topPlots,
outputPrefix = outputPrefix, TERM2GENE = TERM2GENE,
runGSEA = runGSEA, nperm = nperm, sampler = sampler,
Sample_Type = Sample_Type, Tissue = Tissue,
Species = Species, GSEA_Type = GSEA_Type
)
} else {
stop("Please enter only 2 genes to compare")
}
# If running in normal mode ...
if (length(genesOfInterest) == 2 ) {
pairRes <- correlationAnalyzeR::analyzeSingleGenes(
genesOfInterest = genesOfInterest, pool = pool,
returnDataOnly = returnDataOnly, topPlots = topPlots,
outputPrefix = outputPrefix, TERM2GENE = TERM2GENE,
runGSEA = runGSEA, nperm = nperm, sampler = sampler,
Sample_Type = Sample_Type, Tissue = Tissue,
#Species = Species,
GSEA_Type = GSEA_Type
)
} else {
stop("Please enter only 2 genes to compare")
}
# If running in normal mode ...
if (length(genesOfInterest) == 2 ) {
pairRes <- correlationAnalyzeR::analyzeSingleGenes(
genesOfInterest = genesOfInterest, pool = pool,
returnDataOnly = returnDataOnly, topPlots = topPlots,
outputPrefix = outputPrefix, TERM2GENE = TERM2GENE,
runGSEA = runGSEA, nperm = nperm, sampler = sampler,
Sample_Type = Sample_Type, Tissue = Tissue,
#Species = Species,
GSEA_Type = GSEA_Type
)
} else {
stop("Please enter only 2 genes to compare")
}
